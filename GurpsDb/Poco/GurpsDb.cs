

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "GurpsDb\App.config"
//     Connection String Name: "ContextGurpsModel"
//     Connection String:      "data source=gurpssqlserver.database.windows.net,1433;initial catalog=Item1;persist security info=True;user Id=mrtaler;password=**zapped**;;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : SQL Azure
// Database Engine Edition: Azure

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace GurpsDb.Poco
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Adv_Test> Adv_Tests { get; set; } // Test
        System.Data.Entity.DbSet<Adv_TestResult> Adv_TestResults { get; set; } // TestResult
        System.Data.Entity.DbSet<Ammoupgrate> Ammoupgrates { get; set; } // AMMOUPGRATES
        System.Data.Entity.DbSet<AnyBoxNameType> AnyBoxNameTypes { get; set; } // AnyBoxNameType
        System.Data.Entity.DbSet<Armour> Armours { get; set; } // ARMOUR
        System.Data.Entity.DbSet<Attachment> Attachments { get; set; } // Attachment
        System.Data.Entity.DbSet<Attachmentmount> Attachmentmounts { get; set; } // Attachmentmount
        System.Data.Entity.DbSet<Attachmentslot> Attachmentslots { get; set; } // ATTACHMENTSLOT
        System.Data.Entity.DbSet<AvailableAttachSlot> AvailableAttachSlots { get; set; } // AvailableAttachSlot
        System.Data.Entity.DbSet<Battery> Batteries { get; set; } // Battery
        System.Data.Entity.DbSet<BoxItem> BoxItems { get; set; } // BoxItem
        System.Data.Entity.DbSet<Caliber> Calibers { get; set; } // Caliber
        System.Data.Entity.DbSet<CharDB_Advantage> CharDB_Advantages { get; set; } // Advantage
        System.Data.Entity.DbSet<CharDB_AdvantagePrereq> CharDB_AdvantagePrereqs { get; set; } // advantage_prereq
        System.Data.Entity.DbSet<CharDB_AttributeBonu> CharDB_AttributeBonus { get; set; } // attribute_bonus
        System.Data.Entity.DbSet<CharDB_AttributePrereq> CharDB_AttributePrereqs { get; set; } // attribute_prereq
        System.Data.Entity.DbSet<CharDB_CharacterDb> CharDB_CharacterDbs { get; set; } // CharacterDB
        System.Data.Entity.DbSet<CharDB_CharSkill> CharDB_CharSkills { get; set; } // CharSkill
        System.Data.Entity.DbSet<CharDB_ContainedWeightPrereq> CharDB_ContainedWeightPrereqs { get; set; } // contained_weight_prereq
        System.Data.Entity.DbSet<CharDB_CostReduction> CharDB_CostReductions { get; set; } // cost_reduction
        System.Data.Entity.DbSet<CharDB_DefaultSkill> CharDB_DefaultSkills { get; set; } // DefaultSkill
        System.Data.Entity.DbSet<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; } // DefSkillSome
        System.Data.Entity.DbSet<CharDB_DifficultySkill> CharDB_DifficultySkills { get; set; } // DifficultySkill
        System.Data.Entity.DbSet<CharDB_DrBonusDb> CharDB_DrBonusDbs { get; set; } // dr_bonusDB
        System.Data.Entity.DbSet<CharDB_GurpsCategory> CharDB_GurpsCategories { get; set; } // GurpsCategory
        System.Data.Entity.DbSet<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // GurpsSkill
        System.Data.Entity.DbSet<CharDB_InventoryOfChar> CharDB_InventoryOfChars { get; set; } // InventoryOfChar
        System.Data.Entity.DbSet<CharDB_MeleeWeapon> CharDB_MeleeWeapons { get; set; } // melee_weapon
        System.Data.Entity.DbSet<CharDB_Modifier> CharDB_Modifiers { get; set; } // modifier
        System.Data.Entity.DbSet<CharDB_NeedSkill> CharDB_NeedSkills { get; set; } // NeedSkill
        System.Data.Entity.DbSet<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; } // prereq_listDB
        System.Data.Entity.DbSet<CharDB_RangedWeapon> CharDB_RangedWeapons { get; set; } // ranged_weapon
        System.Data.Entity.DbSet<CharDB_SkillBonusDb> CharDB_SkillBonusDbs { get; set; } // skill_bonusDB
        System.Data.Entity.DbSet<CharDB_SkillPrereqDb> CharDB_SkillPrereqDbs { get; set; } // skill_prereqDB
        System.Data.Entity.DbSet<CharDB_SpellBonu> CharDB_SpellBonus { get; set; } // spell_bonus
        System.Data.Entity.DbSet<CharDB_SpellPrereqDb> CharDB_SpellPrereqDbs { get; set; } // spell_prereqDB
        System.Data.Entity.DbSet<CharDB_WeaponBonu> CharDB_WeaponBonus { get; set; } // weapon_bonus
        System.Data.Entity.DbSet<Cloth> Clothes { get; set; } // Clothes
        System.Data.Entity.DbSet<CombineWeap> CombineWeaps { get; set; } // CombineWeap
        System.Data.Entity.DbSet<Drug> Drugs { get; set; } // Drug
        System.Data.Entity.DbSet<Explosive> Explosives { get; set; } // EXPLOSIVE
        System.Data.Entity.DbSet<Food> Foods { get; set; } // FOOD
        System.Data.Entity.DbSet<GAttachClass> GAttachClasses { get; set; } // G_AttachClass
        System.Data.Entity.DbSet<GAvAttachClass> GAvAttachClasses { get; set; } // G_AvAttachClass
        System.Data.Entity.DbSet<GSubAttachClass> GSubAttachClasses { get; set; } // G_SubAttachClass
        System.Data.Entity.DbSet<GurpsClass> GurpsClasses { get; set; } // GurpsClass
        System.Data.Entity.DbSet<Item> Items { get; set; } // ITEM
        System.Data.Entity.DbSet<ItemClass> ItemClasses { get; set; } // ItemClass
        System.Data.Entity.DbSet<ItemSubClass> ItemSubClasses { get; set; } // ItemSubClass
        System.Data.Entity.DbSet<LaserColorEf> LaserColorEfs { get; set; } // LaserColorEf
        System.Data.Entity.DbSet<Lc> Lcs { get; set; } // LC
        System.Data.Entity.DbSet<Loadbearingequipment> Loadbearingequipments { get; set; } // LOADBEARINGEQUIPMENT
        System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules
        System.Data.Entity.DbSet<Tl> Tls { get; set; } // TL
        System.Data.Entity.DbSet<TypeOfBox> TypeOfBoxes { get; set; } // Type_of_Box
        System.Data.Entity.DbSet<TypeOfDamage> TypeOfDamages { get; set; } // TypeOfDamage
        System.Data.Entity.DbSet<Weapon> Weapons { get; set; } // WEAPON
        System.Data.Entity.DbSet<WeaponAttackType> WeaponAttackTypes { get; set; } // WeaponAttackType
        System.Data.Entity.DbSet<WeaponDamage> WeaponDamages { get; set; } // WeaponDamage

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);

        // Stored Procedures
        int NewItem(string name, string classOfItem, out int? returns);
        // NewItemAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int NewItemAmmo(string name, decimal? weigth, decimal? price, string sClass);
        // NewItemAmmoAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int NewItemAtt(string name, int? gAttClass, int? gSubAtt, string idAttMount);
        // NewItemAttAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int NewItemWeap(string name, string classOfItem, decimal? weight, int? st, string bulk, decimal? cost, string lcin, string tLin, string desc, bool? twoHanded, string weaponClass, string weaponType, bool? fullAuto, int? accAddin, int? rofForSh, int? rof, int? recoill, int? defAcCc, int? halfRangee, int? fullRangee, string damagee, int? shotss, bool? addinChamber, int? timeForreload, bool? singlereload, string damage, decimal? armorDivision, string typeOfDamage1, string typeOfDamage2, string typeOfDam1, string typeOfDam2, out int? returns);
        // NewItemWeapAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<Adv_Test> Adv_Tests { get; set; } // Test
        public System.Data.Entity.DbSet<Adv_TestResult> Adv_TestResults { get; set; } // TestResult
        public System.Data.Entity.DbSet<Ammoupgrate> Ammoupgrates { get; set; } // AMMOUPGRATES
        public System.Data.Entity.DbSet<AnyBoxNameType> AnyBoxNameTypes { get; set; } // AnyBoxNameType
        public System.Data.Entity.DbSet<Armour> Armours { get; set; } // ARMOUR
        public System.Data.Entity.DbSet<Attachment> Attachments { get; set; } // Attachment
        public System.Data.Entity.DbSet<Attachmentmount> Attachmentmounts { get; set; } // Attachmentmount
        public System.Data.Entity.DbSet<Attachmentslot> Attachmentslots { get; set; } // ATTACHMENTSLOT
        public System.Data.Entity.DbSet<AvailableAttachSlot> AvailableAttachSlots { get; set; } // AvailableAttachSlot
        public System.Data.Entity.DbSet<Battery> Batteries { get; set; } // Battery
        public System.Data.Entity.DbSet<BoxItem> BoxItems { get; set; } // BoxItem
        public System.Data.Entity.DbSet<Caliber> Calibers { get; set; } // Caliber
        public System.Data.Entity.DbSet<CharDB_Advantage> CharDB_Advantages { get; set; } // Advantage
        public System.Data.Entity.DbSet<CharDB_AdvantagePrereq> CharDB_AdvantagePrereqs { get; set; } // advantage_prereq
        public System.Data.Entity.DbSet<CharDB_AttributeBonu> CharDB_AttributeBonus { get; set; } // attribute_bonus
        public System.Data.Entity.DbSet<CharDB_AttributePrereq> CharDB_AttributePrereqs { get; set; } // attribute_prereq
        public System.Data.Entity.DbSet<CharDB_CharacterDb> CharDB_CharacterDbs { get; set; } // CharacterDB
        public System.Data.Entity.DbSet<CharDB_CharSkill> CharDB_CharSkills { get; set; } // CharSkill
        public System.Data.Entity.DbSet<CharDB_ContainedWeightPrereq> CharDB_ContainedWeightPrereqs { get; set; } // contained_weight_prereq
        public System.Data.Entity.DbSet<CharDB_CostReduction> CharDB_CostReductions { get; set; } // cost_reduction
        public System.Data.Entity.DbSet<CharDB_DefaultSkill> CharDB_DefaultSkills { get; set; } // DefaultSkill
        public System.Data.Entity.DbSet<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; } // DefSkillSome
        public System.Data.Entity.DbSet<CharDB_DifficultySkill> CharDB_DifficultySkills { get; set; } // DifficultySkill
        public System.Data.Entity.DbSet<CharDB_DrBonusDb> CharDB_DrBonusDbs { get; set; } // dr_bonusDB
        public System.Data.Entity.DbSet<CharDB_GurpsCategory> CharDB_GurpsCategories { get; set; } // GurpsCategory
        public System.Data.Entity.DbSet<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // GurpsSkill
        public System.Data.Entity.DbSet<CharDB_InventoryOfChar> CharDB_InventoryOfChars { get; set; } // InventoryOfChar
        public System.Data.Entity.DbSet<CharDB_MeleeWeapon> CharDB_MeleeWeapons { get; set; } // melee_weapon
        public System.Data.Entity.DbSet<CharDB_Modifier> CharDB_Modifiers { get; set; } // modifier
        public System.Data.Entity.DbSet<CharDB_NeedSkill> CharDB_NeedSkills { get; set; } // NeedSkill
        public System.Data.Entity.DbSet<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; } // prereq_listDB
        public System.Data.Entity.DbSet<CharDB_RangedWeapon> CharDB_RangedWeapons { get; set; } // ranged_weapon
        public System.Data.Entity.DbSet<CharDB_SkillBonusDb> CharDB_SkillBonusDbs { get; set; } // skill_bonusDB
        public System.Data.Entity.DbSet<CharDB_SkillPrereqDb> CharDB_SkillPrereqDbs { get; set; } // skill_prereqDB
        public System.Data.Entity.DbSet<CharDB_SpellBonu> CharDB_SpellBonus { get; set; } // spell_bonus
        public System.Data.Entity.DbSet<CharDB_SpellPrereqDb> CharDB_SpellPrereqDbs { get; set; } // spell_prereqDB
        public System.Data.Entity.DbSet<CharDB_WeaponBonu> CharDB_WeaponBonus { get; set; } // weapon_bonus
        public System.Data.Entity.DbSet<Cloth> Clothes { get; set; } // Clothes
        public System.Data.Entity.DbSet<CombineWeap> CombineWeaps { get; set; } // CombineWeap
        public System.Data.Entity.DbSet<Drug> Drugs { get; set; } // Drug
        public System.Data.Entity.DbSet<Explosive> Explosives { get; set; } // EXPLOSIVE
        public System.Data.Entity.DbSet<Food> Foods { get; set; } // FOOD
        public System.Data.Entity.DbSet<GAttachClass> GAttachClasses { get; set; } // G_AttachClass
        public System.Data.Entity.DbSet<GAvAttachClass> GAvAttachClasses { get; set; } // G_AvAttachClass
        public System.Data.Entity.DbSet<GSubAttachClass> GSubAttachClasses { get; set; } // G_SubAttachClass
        public System.Data.Entity.DbSet<GurpsClass> GurpsClasses { get; set; } // GurpsClass
        public System.Data.Entity.DbSet<Item> Items { get; set; } // ITEM
        public System.Data.Entity.DbSet<ItemClass> ItemClasses { get; set; } // ItemClass
        public System.Data.Entity.DbSet<ItemSubClass> ItemSubClasses { get; set; } // ItemSubClass
        public System.Data.Entity.DbSet<LaserColorEf> LaserColorEfs { get; set; } // LaserColorEf
        public System.Data.Entity.DbSet<Lc> Lcs { get; set; } // LC
        public System.Data.Entity.DbSet<Loadbearingequipment> Loadbearingequipments { get; set; } // LOADBEARINGEQUIPMENT
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules
        public System.Data.Entity.DbSet<Tl> Tls { get; set; } // TL
        public System.Data.Entity.DbSet<TypeOfBox> TypeOfBoxes { get; set; } // Type_of_Box
        public System.Data.Entity.DbSet<TypeOfDamage> TypeOfDamages { get; set; } // TypeOfDamage
        public System.Data.Entity.DbSet<Weapon> Weapons { get; set; } // WEAPON
        public System.Data.Entity.DbSet<WeaponAttackType> WeaponAttackTypes { get; set; } // WeaponAttackType
        public System.Data.Entity.DbSet<WeaponDamage> WeaponDamages { get; set; } // WeaponDamage

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=ContextGurpsModel")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new Adv_TestConfiguration());
            modelBuilder.Configurations.Add(new Adv_TestResultConfiguration());
            modelBuilder.Configurations.Add(new AmmoupgrateConfiguration());
            modelBuilder.Configurations.Add(new AnyBoxNameTypeConfiguration());
            modelBuilder.Configurations.Add(new ArmourConfiguration());
            modelBuilder.Configurations.Add(new AttachmentConfiguration());
            modelBuilder.Configurations.Add(new AttachmentmountConfiguration());
            modelBuilder.Configurations.Add(new AttachmentslotConfiguration());
            modelBuilder.Configurations.Add(new AvailableAttachSlotConfiguration());
            modelBuilder.Configurations.Add(new BatteryConfiguration());
            modelBuilder.Configurations.Add(new BoxItemConfiguration());
            modelBuilder.Configurations.Add(new CaliberConfiguration());
            modelBuilder.Configurations.Add(new CharDB_AdvantageConfiguration());
            modelBuilder.Configurations.Add(new CharDB_AdvantagePrereqConfiguration());
            modelBuilder.Configurations.Add(new CharDB_AttributeBonuConfiguration());
            modelBuilder.Configurations.Add(new CharDB_AttributePrereqConfiguration());
            modelBuilder.Configurations.Add(new CharDB_CharacterDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_CharSkillConfiguration());
            modelBuilder.Configurations.Add(new CharDB_ContainedWeightPrereqConfiguration());
            modelBuilder.Configurations.Add(new CharDB_CostReductionConfiguration());
            modelBuilder.Configurations.Add(new CharDB_DefaultSkillConfiguration());
            modelBuilder.Configurations.Add(new CharDB_DefSkillSomeConfiguration());
            modelBuilder.Configurations.Add(new CharDB_DifficultySkillConfiguration());
            modelBuilder.Configurations.Add(new CharDB_DrBonusDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_GurpsCategoryConfiguration());
            modelBuilder.Configurations.Add(new CharDB_GurpsSkillConfiguration());
            modelBuilder.Configurations.Add(new CharDB_InventoryOfCharConfiguration());
            modelBuilder.Configurations.Add(new CharDB_MeleeWeaponConfiguration());
            modelBuilder.Configurations.Add(new CharDB_ModifierConfiguration());
            modelBuilder.Configurations.Add(new CharDB_NeedSkillConfiguration());
            modelBuilder.Configurations.Add(new CharDB_PrereqListDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_RangedWeaponConfiguration());
            modelBuilder.Configurations.Add(new CharDB_SkillBonusDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_SkillPrereqDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_SpellBonuConfiguration());
            modelBuilder.Configurations.Add(new CharDB_SpellPrereqDbConfiguration());
            modelBuilder.Configurations.Add(new CharDB_WeaponBonuConfiguration());
            modelBuilder.Configurations.Add(new ClothConfiguration());
            modelBuilder.Configurations.Add(new CombineWeapConfiguration());
            modelBuilder.Configurations.Add(new DrugConfiguration());
            modelBuilder.Configurations.Add(new ExplosiveConfiguration());
            modelBuilder.Configurations.Add(new FoodConfiguration());
            modelBuilder.Configurations.Add(new GAttachClassConfiguration());
            modelBuilder.Configurations.Add(new GAvAttachClassConfiguration());
            modelBuilder.Configurations.Add(new GSubAttachClassConfiguration());
            modelBuilder.Configurations.Add(new GurpsClassConfiguration());
            modelBuilder.Configurations.Add(new ItemConfiguration());
            modelBuilder.Configurations.Add(new ItemClassConfiguration());
            modelBuilder.Configurations.Add(new ItemSubClassConfiguration());
            modelBuilder.Configurations.Add(new LaserColorEfConfiguration());
            modelBuilder.Configurations.Add(new LcConfiguration());
            modelBuilder.Configurations.Add(new LoadbearingequipmentConfiguration());
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration());
            modelBuilder.Configurations.Add(new TlConfiguration());
            modelBuilder.Configurations.Add(new TypeOfBoxConfiguration());
            modelBuilder.Configurations.Add(new TypeOfDamageConfiguration());
            modelBuilder.Configurations.Add(new WeaponConfiguration());
            modelBuilder.Configurations.Add(new WeaponAttackTypeConfiguration());
            modelBuilder.Configurations.Add(new WeaponDamageConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new Adv_TestConfiguration(schema));
            modelBuilder.Configurations.Add(new Adv_TestResultConfiguration(schema));
            modelBuilder.Configurations.Add(new AmmoupgrateConfiguration(schema));
            modelBuilder.Configurations.Add(new AnyBoxNameTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new ArmourConfiguration(schema));
            modelBuilder.Configurations.Add(new AttachmentConfiguration(schema));
            modelBuilder.Configurations.Add(new AttachmentmountConfiguration(schema));
            modelBuilder.Configurations.Add(new AttachmentslotConfiguration(schema));
            modelBuilder.Configurations.Add(new AvailableAttachSlotConfiguration(schema));
            modelBuilder.Configurations.Add(new BatteryConfiguration(schema));
            modelBuilder.Configurations.Add(new BoxItemConfiguration(schema));
            modelBuilder.Configurations.Add(new CaliberConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_AdvantageConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_AdvantagePrereqConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_AttributeBonuConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_AttributePrereqConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_CharacterDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_CharSkillConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_ContainedWeightPrereqConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_CostReductionConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_DefaultSkillConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_DefSkillSomeConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_DifficultySkillConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_DrBonusDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_GurpsCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_GurpsSkillConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_InventoryOfCharConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_MeleeWeaponConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_ModifierConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_NeedSkillConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_PrereqListDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_RangedWeaponConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_SkillBonusDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_SkillPrereqDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_SpellBonuConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_SpellPrereqDbConfiguration(schema));
            modelBuilder.Configurations.Add(new CharDB_WeaponBonuConfiguration(schema));
            modelBuilder.Configurations.Add(new ClothConfiguration(schema));
            modelBuilder.Configurations.Add(new CombineWeapConfiguration(schema));
            modelBuilder.Configurations.Add(new DrugConfiguration(schema));
            modelBuilder.Configurations.Add(new ExplosiveConfiguration(schema));
            modelBuilder.Configurations.Add(new FoodConfiguration(schema));
            modelBuilder.Configurations.Add(new GAttachClassConfiguration(schema));
            modelBuilder.Configurations.Add(new GAvAttachClassConfiguration(schema));
            modelBuilder.Configurations.Add(new GSubAttachClassConfiguration(schema));
            modelBuilder.Configurations.Add(new GurpsClassConfiguration(schema));
            modelBuilder.Configurations.Add(new ItemConfiguration(schema));
            modelBuilder.Configurations.Add(new ItemClassConfiguration(schema));
            modelBuilder.Configurations.Add(new ItemSubClassConfiguration(schema));
            modelBuilder.Configurations.Add(new LaserColorEfConfiguration(schema));
            modelBuilder.Configurations.Add(new LcConfiguration(schema));
            modelBuilder.Configurations.Add(new LoadbearingequipmentConfiguration(schema));
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration(schema));
            modelBuilder.Configurations.Add(new TlConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeOfBoxConfiguration(schema));
            modelBuilder.Configurations.Add(new TypeOfDamageConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponAttackTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new WeaponDamageConfiguration(schema));
            return modelBuilder;
        }
        
        // Stored Procedures
        public int NewItem(string name, string classOfItem, out int? returns)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 80 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var classOfItemParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@class_ofItem", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = classOfItem, Size = 80 };
            if (classOfItemParam.Value == null)
                classOfItemParam.Value = System.DBNull.Value;

            var returnsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Returns", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[NEW_ITEM] @name, @class_ofItem, @Returns OUTPUT", nameParam, classOfItemParam, returnsParam, procResultParam);
            if (IsSqlParameterNull(returnsParam))
                returns = null;
            else
                returns = (int) returnsParam.Value;
 
            return (int) procResultParam.Value;
        }

        public int NewItemAmmo(string name, decimal? weigth, decimal? price, string sClass)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 80 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var weigthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@weigth", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = weigth.GetValueOrDefault(), Precision = 7, Scale = 3 };
            if (!weigth.HasValue)
                weigthParam.Value = System.DBNull.Value;

            var priceParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@price", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = price.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!price.HasValue)
                priceParam.Value = System.DBNull.Value;

            var sClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@sClass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = sClass, Size = 80 };
            if (sClassParam.Value == null)
                sClassParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[NEW_ITEM_Ammo] @name, @weigth, @price, @sClass", nameParam, weigthParam, priceParam, sClassParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int NewItemAtt(string name, int? gAttClass, int? gSubAtt, string idAttMount)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 80 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var gAttClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@G_att_class", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = gAttClass.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gAttClass.HasValue)
                gAttClassParam.Value = System.DBNull.Value;

            var gSubAttParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@G_sub_att", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = gSubAtt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!gSubAtt.HasValue)
                gSubAttParam.Value = System.DBNull.Value;

            var idAttMountParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@id_att_mount", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = idAttMount, Size = 80 };
            if (idAttMountParam.Value == null)
                idAttMountParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[NEW_ITEM_att] @name, @G_att_class, @G_sub_att, @id_att_mount", nameParam, gAttClassParam, gSubAttParam, idAttMountParam, procResultParam);
 
            return (int) procResultParam.Value;
        }

        public int NewItemWeap(string name, string classOfItem, decimal? weight, int? st, string bulk, decimal? cost, string lcin, string tLin, string desc, bool? twoHanded, string weaponClass, string weaponType, bool? fullAuto, int? accAddin, int? rofForSh, int? rof, int? recoill, int? defAcCc, int? halfRangee, int? fullRangee, string damagee, int? shotss, bool? addinChamber, int? timeForreload, bool? singlereload, string damage, decimal? armorDivision, string typeOfDamage1, string typeOfDamage2, string typeOfDam1, string typeOfDam2, out int? returns)
        {
            var nameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@name", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = name, Size = 80 };
            if (nameParam.Value == null)
                nameParam.Value = System.DBNull.Value;

            var classOfItemParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@class_ofItem", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = classOfItem, Size = 80 };
            if (classOfItemParam.Value == null)
                classOfItemParam.Value = System.DBNull.Value;

            var weightParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Weight", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = weight.GetValueOrDefault(), Precision = 7, Scale = 3 };
            if (!weight.HasValue)
                weightParam.Value = System.DBNull.Value;

            var stParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ST", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = st.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!st.HasValue)
                stParam.Value = System.DBNull.Value;

            var bulkParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Bulk", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = bulk, Size = 80 };
            if (bulkParam.Value == null)
                bulkParam.Value = System.DBNull.Value;

            var costParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Cost", SqlDbType = System.Data.SqlDbType.Money, Direction = System.Data.ParameterDirection.Input, Value = cost.GetValueOrDefault(), Precision = 19, Scale = 4 };
            if (!cost.HasValue)
                costParam.Value = System.DBNull.Value;

            var lcinParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Lcin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = lcin, Size = 10 };
            if (lcinParam.Value == null)
                lcinParam.Value = System.DBNull.Value;

            var tLinParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TLin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = tLin, Size = 10 };
            if (tLinParam.Value == null)
                tLinParam.Value = System.DBNull.Value;

            var descParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Desc", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = desc, Size = -1 };
            if (descParam.Value == null)
                descParam.Value = System.DBNull.Value;

            var twoHandedParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TwoHanded", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = twoHanded.GetValueOrDefault() };
            if (!twoHanded.HasValue)
                twoHandedParam.Value = System.DBNull.Value;

            var weaponClassParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@WeaponClass", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = weaponClass, Size = 80 };
            if (weaponClassParam.Value == null)
                weaponClassParam.Value = System.DBNull.Value;

            var weaponTypeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@WeaponType", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = weaponType, Size = 80 };
            if (weaponTypeParam.Value == null)
                weaponTypeParam.Value = System.DBNull.Value;

            var fullAutoParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Full_auto", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = fullAuto.GetValueOrDefault() };
            if (!fullAuto.HasValue)
                fullAutoParam.Value = System.DBNull.Value;

            var accAddinParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ACCAddin", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = accAddin.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!accAddin.HasValue)
                accAddinParam.Value = System.DBNull.Value;

            var rofForShParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ROF_for_Sh", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rofForSh.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rofForSh.HasValue)
                rofForShParam.Value = System.DBNull.Value;

            var rofParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ROF", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = rof.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!rof.HasValue)
                rofParam.Value = System.DBNull.Value;

            var recoillParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Recoill", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = recoill.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!recoill.HasValue)
                recoillParam.Value = System.DBNull.Value;

            var defAcCcParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@DefACCc", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = defAcCc.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!defAcCc.HasValue)
                defAcCcParam.Value = System.DBNull.Value;

            var halfRangeeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Half_Rangee", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = halfRangee.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!halfRangee.HasValue)
                halfRangeeParam.Value = System.DBNull.Value;

            var fullRangeeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FullRangee", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = fullRangee.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!fullRangee.HasValue)
                fullRangeeParam.Value = System.DBNull.Value;

            var damageeParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Damagee", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = damagee, Size = 50 };
            if (damageeParam.Value == null)
                damageeParam.Value = System.DBNull.Value;

            var shotssParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Shotss", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = shotss.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!shotss.HasValue)
                shotssParam.Value = System.DBNull.Value;

            var addinChamberParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@AddinChamber", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = addinChamber.GetValueOrDefault() };
            if (!addinChamber.HasValue)
                addinChamberParam.Value = System.DBNull.Value;

            var timeForreloadParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@TimeForreload", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = timeForreload.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!timeForreload.HasValue)
                timeForreloadParam.Value = System.DBNull.Value;

            var singlereloadParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@singlereload", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Input, Value = singlereload.GetValueOrDefault() };
            if (!singlereload.HasValue)
                singlereloadParam.Value = System.DBNull.Value;

            var damageParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Damage", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = damage, Size = 80 };
            if (damageParam.Value == null)
                damageParam.Value = System.DBNull.Value;

            var armorDivisionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ArmorDivision", SqlDbType = System.Data.SqlDbType.Decimal, Direction = System.Data.ParameterDirection.Input, Value = armorDivision.GetValueOrDefault(), Precision = 5, Scale = 2 };
            if (!armorDivision.HasValue)
                armorDivisionParam.Value = System.DBNull.Value;

            var typeOfDamage1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@TypeOfDamage1", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = typeOfDamage1, Size = 50 };
            if (typeOfDamage1Param.Value == null)
                typeOfDamage1Param.Value = System.DBNull.Value;

            var typeOfDamage2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@TypeOfDamage2", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = typeOfDamage2, Size = 50 };
            if (typeOfDamage2Param.Value == null)
                typeOfDamage2Param.Value = System.DBNull.Value;

            var typeOfDam1Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@TypeOfDam1", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = typeOfDam1, Size = 50 };
            if (typeOfDam1Param.Value == null)
                typeOfDam1Param.Value = System.DBNull.Value;

            var typeOfDam2Param = new System.Data.SqlClient.SqlParameter { ParameterName = "@TypeOfDam2", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = typeOfDam2, Size = 50 };
            if (typeOfDam2Param.Value == null)
                typeOfDam2Param.Value = System.DBNull.Value;

            var returnsParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Returns", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
 
            Database.ExecuteSqlCommand("EXEC @procResult = [dbo].[NEW_ITEMWeap] @name, @class_ofItem, @Weight, @ST, @Bulk, @Cost, @Lcin, @TLin, @Desc, @TwoHanded, @WeaponClass, @WeaponType, @Full_auto, @ACCAddin, @ROF_for_Sh, @ROF, @Recoill, @DefACCc, @Half_Rangee, @FullRangee, @Damagee, @Shotss, @AddinChamber, @TimeForreload, @singlereload, @Damage, @ArmorDivision, @TypeOfDamage1, @TypeOfDamage2, @TypeOfDam1, @TypeOfDam2, @Returns OUTPUT", nameParam, classOfItemParam, weightParam, stParam, bulkParam, costParam, lcinParam, tLinParam, descParam, twoHandedParam, weaponClassParam, weaponTypeParam, fullAutoParam, accAddinParam, rofForShParam, rofParam, recoillParam, defAcCcParam, halfRangeeParam, fullRangeeParam, damageeParam, shotssParam, addinChamberParam, timeForreloadParam, singlereloadParam, damageParam, armorDivisionParam, typeOfDamage1Param, typeOfDamage2Param, typeOfDam1Param, typeOfDam2Param, returnsParam, procResultParam);
            if (IsSqlParameterNull(returnsParam))
                returns = null;
            else
                returns = (int) returnsParam.Value;
 
            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<Adv_Test> Adv_Tests { get; set; }
        public System.Data.Entity.DbSet<Adv_TestResult> Adv_TestResults { get; set; }
        public System.Data.Entity.DbSet<Ammoupgrate> Ammoupgrates { get; set; }
        public System.Data.Entity.DbSet<AnyBoxNameType> AnyBoxNameTypes { get; set; }
        public System.Data.Entity.DbSet<Armour> Armours { get; set; }
        public System.Data.Entity.DbSet<Attachment> Attachments { get; set; }
        public System.Data.Entity.DbSet<Attachmentmount> Attachmentmounts { get; set; }
        public System.Data.Entity.DbSet<Attachmentslot> Attachmentslots { get; set; }
        public System.Data.Entity.DbSet<AvailableAttachSlot> AvailableAttachSlots { get; set; }
        public System.Data.Entity.DbSet<Battery> Batteries { get; set; }
        public System.Data.Entity.DbSet<BoxItem> BoxItems { get; set; }
        public System.Data.Entity.DbSet<Caliber> Calibers { get; set; }
        public System.Data.Entity.DbSet<CharDB_Advantage> CharDB_Advantages { get; set; }
        public System.Data.Entity.DbSet<CharDB_AdvantagePrereq> CharDB_AdvantagePrereqs { get; set; }
        public System.Data.Entity.DbSet<CharDB_AttributeBonu> CharDB_AttributeBonus { get; set; }
        public System.Data.Entity.DbSet<CharDB_AttributePrereq> CharDB_AttributePrereqs { get; set; }
        public System.Data.Entity.DbSet<CharDB_CharacterDb> CharDB_CharacterDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_CharSkill> CharDB_CharSkills { get; set; }
        public System.Data.Entity.DbSet<CharDB_ContainedWeightPrereq> CharDB_ContainedWeightPrereqs { get; set; }
        public System.Data.Entity.DbSet<CharDB_CostReduction> CharDB_CostReductions { get; set; }
        public System.Data.Entity.DbSet<CharDB_DefaultSkill> CharDB_DefaultSkills { get; set; }
        public System.Data.Entity.DbSet<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; }
        public System.Data.Entity.DbSet<CharDB_DifficultySkill> CharDB_DifficultySkills { get; set; }
        public System.Data.Entity.DbSet<CharDB_DrBonusDb> CharDB_DrBonusDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_GurpsCategory> CharDB_GurpsCategories { get; set; }
        public System.Data.Entity.DbSet<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; }
        public System.Data.Entity.DbSet<CharDB_InventoryOfChar> CharDB_InventoryOfChars { get; set; }
        public System.Data.Entity.DbSet<CharDB_MeleeWeapon> CharDB_MeleeWeapons { get; set; }
        public System.Data.Entity.DbSet<CharDB_Modifier> CharDB_Modifiers { get; set; }
        public System.Data.Entity.DbSet<CharDB_NeedSkill> CharDB_NeedSkills { get; set; }
        public System.Data.Entity.DbSet<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_RangedWeapon> CharDB_RangedWeapons { get; set; }
        public System.Data.Entity.DbSet<CharDB_SkillBonusDb> CharDB_SkillBonusDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_SkillPrereqDb> CharDB_SkillPrereqDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_SpellBonu> CharDB_SpellBonus { get; set; }
        public System.Data.Entity.DbSet<CharDB_SpellPrereqDb> CharDB_SpellPrereqDbs { get; set; }
        public System.Data.Entity.DbSet<CharDB_WeaponBonu> CharDB_WeaponBonus { get; set; }
        public System.Data.Entity.DbSet<Cloth> Clothes { get; set; }
        public System.Data.Entity.DbSet<CombineWeap> CombineWeaps { get; set; }
        public System.Data.Entity.DbSet<Drug> Drugs { get; set; }
        public System.Data.Entity.DbSet<Explosive> Explosives { get; set; }
        public System.Data.Entity.DbSet<Food> Foods { get; set; }
        public System.Data.Entity.DbSet<GAttachClass> GAttachClasses { get; set; }
        public System.Data.Entity.DbSet<GAvAttachClass> GAvAttachClasses { get; set; }
        public System.Data.Entity.DbSet<GSubAttachClass> GSubAttachClasses { get; set; }
        public System.Data.Entity.DbSet<GurpsClass> GurpsClasses { get; set; }
        public System.Data.Entity.DbSet<Item> Items { get; set; }
        public System.Data.Entity.DbSet<ItemClass> ItemClasses { get; set; }
        public System.Data.Entity.DbSet<ItemSubClass> ItemSubClasses { get; set; }
        public System.Data.Entity.DbSet<LaserColorEf> LaserColorEfs { get; set; }
        public System.Data.Entity.DbSet<Lc> Lcs { get; set; }
        public System.Data.Entity.DbSet<Loadbearingequipment> Loadbearingequipments { get; set; }
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; }
        public System.Data.Entity.DbSet<Tl> Tls { get; set; }
        public System.Data.Entity.DbSet<TypeOfBox> TypeOfBoxes { get; set; }
        public System.Data.Entity.DbSet<TypeOfDamage> TypeOfDamages { get; set; }
        public System.Data.Entity.DbSet<Weapon> Weapons { get; set; }
        public System.Data.Entity.DbSet<WeaponAttackType> WeaponAttackTypes { get; set; }
        public System.Data.Entity.DbSet<WeaponDamage> WeaponDamages { get; set; }

        public FakeMyDbContext()
        {
            Adv_Tests = new FakeDbSet<Adv_Test>("Id");
            Adv_TestResults = new FakeDbSet<Adv_TestResult>("Id");
            Ammoupgrates = new FakeDbSet<Ammoupgrate>("Id");
            AnyBoxNameTypes = new FakeDbSet<AnyBoxNameType>("Id");
            Armours = new FakeDbSet<Armour>("UiIndex");
            Attachments = new FakeDbSet<Attachment>("UiIndex");
            Attachmentmounts = new FakeDbSet<Attachmentmount>("Id");
            Attachmentslots = new FakeDbSet<Attachmentslot>("UiSlotIndex");
            AvailableAttachSlots = new FakeDbSet<AvailableAttachSlot>("Id");
            Batteries = new FakeDbSet<Battery>("Id");
            BoxItems = new FakeDbSet<BoxItem>("Id");
            Calibers = new FakeDbSet<Caliber>("Id");
            CharDB_Advantages = new FakeDbSet<CharDB_Advantage>("Id");
            CharDB_AdvantagePrereqs = new FakeDbSet<CharDB_AdvantagePrereq>("Id");
            CharDB_AttributeBonus = new FakeDbSet<CharDB_AttributeBonu>("Id");
            CharDB_AttributePrereqs = new FakeDbSet<CharDB_AttributePrereq>("Id");
            CharDB_CharacterDbs = new FakeDbSet<CharDB_CharacterDb>("Id");
            CharDB_CharSkills = new FakeDbSet<CharDB_CharSkill>("IdSkill", "IdChar");
            CharDB_ContainedWeightPrereqs = new FakeDbSet<CharDB_ContainedWeightPrereq>("Id");
            CharDB_CostReductions = new FakeDbSet<CharDB_CostReduction>("Id");
            CharDB_DefaultSkills = new FakeDbSet<CharDB_DefaultSkill>("Id");
            CharDB_DefSkillSomes = new FakeDbSet<CharDB_DefSkillSome>("Id");
            CharDB_DifficultySkills = new FakeDbSet<CharDB_DifficultySkill>("Id");
            CharDB_DrBonusDbs = new FakeDbSet<CharDB_DrBonusDb>("Id");
            CharDB_GurpsCategories = new FakeDbSet<CharDB_GurpsCategory>("Id");
            CharDB_GurpsSkills = new FakeDbSet<CharDB_GurpsSkill>("Id");
            CharDB_InventoryOfChars = new FakeDbSet<CharDB_InventoryOfChar>("Id");
            CharDB_MeleeWeapons = new FakeDbSet<CharDB_MeleeWeapon>("Id");
            CharDB_Modifiers = new FakeDbSet<CharDB_Modifier>("Id");
            CharDB_NeedSkills = new FakeDbSet<CharDB_NeedSkill>("IdSkillIn");
            CharDB_PrereqListDbs = new FakeDbSet<CharDB_PrereqListDb>("Id");
            CharDB_RangedWeapons = new FakeDbSet<CharDB_RangedWeapon>("Id");
            CharDB_SkillBonusDbs = new FakeDbSet<CharDB_SkillBonusDb>("Id");
            CharDB_SkillPrereqDbs = new FakeDbSet<CharDB_SkillPrereqDb>("Id");
            CharDB_SpellBonus = new FakeDbSet<CharDB_SpellBonu>("Id");
            CharDB_SpellPrereqDbs = new FakeDbSet<CharDB_SpellPrereqDb>("Id");
            CharDB_WeaponBonus = new FakeDbSet<CharDB_WeaponBonu>("Id");
            Clothes = new FakeDbSet<Cloth>("Id");
            CombineWeaps = new FakeDbSet<CombineWeap>("Id");
            Drugs = new FakeDbSet<Drug>("Id");
            Explosives = new FakeDbSet<Explosive>("UiIndex");
            Foods = new FakeDbSet<Food>("Id");
            GAttachClasses = new FakeDbSet<GAttachClass>("Id");
            GAvAttachClasses = new FakeDbSet<GAvAttachClass>("IdAttach", "IdGSubClass");
            GSubAttachClasses = new FakeDbSet<GSubAttachClass>("Id");
            GurpsClasses = new FakeDbSet<GurpsClass>("Id");
            Items = new FakeDbSet<Item>("UiIndex");
            ItemClasses = new FakeDbSet<ItemClass>("Id");
            ItemSubClasses = new FakeDbSet<ItemSubClass>("Id");
            LaserColorEfs = new FakeDbSet<LaserColorEf>("Id");
            Lcs = new FakeDbSet<Lc>("IdLc");
            Loadbearingequipments = new FakeDbSet<Loadbearingequipment>("LbeIndex");
            sys_DatabaseFirewallRules = new FakeDbSet<sys_DatabaseFirewallRule>("Id", "Name", "StartIpAddress", "EndIpAddress", "CreateDate", "ModifyDate");
            Tls = new FakeDbSet<Tl>("IdTl");
            TypeOfBoxes = new FakeDbSet<TypeOfBox>("Id");
            TypeOfDamages = new FakeDbSet<TypeOfDamage>("Id");
            Weapons = new FakeDbSet<Weapon>("UiIndex");
            WeaponAttackTypes = new FakeDbSet<WeaponAttackType>("Id");
            WeaponDamages = new FakeDbSet<WeaponDamage>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        // Stored Procedures
        public int NewItem(string name, string classOfItem, out int? returns)
        {
            returns = default(int);
 
            return 0;
        }

        public int NewItemAmmo(string name, decimal? weigth, decimal? price, string sClass)
        {
 
            return 0;
        }

        public int NewItemAtt(string name, int? gAttClass, int? gSubAtt, string idAttMount)
        {
 
            return 0;
        }

        public int NewItemWeap(string name, string classOfItem, decimal? weight, int? st, string bulk, decimal? cost, string lcin, string tLin, string desc, bool? twoHanded, string weaponClass, string weaponType, bool? fullAuto, int? accAddin, int? rofForSh, int? rof, int? recoill, int? defAcCc, int? halfRangee, int? fullRangee, string damagee, int? shotss, bool? addinChamber, int? timeForreload, bool? singlereload, string damage, decimal? armorDivision, string typeOfDamage1, string typeOfDamage2, string typeOfDam1, string typeOfDam2, out int? returns)
        {
            returns = default(int);
 
            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Test
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Adv_Test
    {
        public string Test { get; set; } // test (length: 50)
        public System.DateTime? Date { get; set; } // date
        public string Mark { get; set; } // mark (length: 50)
        public int Id { get; set; } // id (Primary key)
        public int? IdChar { get; set; } // IdChar

        // Foreign keys
        public virtual Adv_TestResult Adv_TestResult { get; set; } // FK_Test_TestResult_id
    }

    // TestResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Adv_TestResult
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public int? Test { get; set; } // test

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Adv_Test> Adv_Tests { get; set; } // Test.FK_Test_TestResult_id

        public Adv_TestResult()
        {
            Adv_Tests = new System.Collections.Generic.List<Adv_Test>();
        }
    }

    // AMMOUPGRATES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Ammoupgrate
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 150)
        public string Shortname { get; set; } // shortname (length: 20)
        public int Malf { get; set; } // malf
        public decimal ArDivX { get; set; } // AR_divX
        public int AccAdd { get; set; } // ACC_add
        public decimal AccX { get; set; } // ACC_x
        public decimal DamageX { get; set; } // damage_x
        public string DamType { get; set; } // Dam_Type (length: 5)
        public decimal RangeX12 { get; set; } // range_x12
        public decimal RangeX { get; set; } // range_x
        public decimal StX { get; set; } // ST_x
        public decimal WpsX { get; set; } // WPS_x
        public decimal CpsX { get; set; } // CPS_x
        public int Hearing { get; set; } // Hearing
        public string AmmoClass { get; set; } // Ammo_Class (length: 15)
        public decimal? MinCaliber { get; set; } // min_Caliber
        public decimal? MaxCalider { get; set; } // Max_Calider
        public decimal? DtMinAmmoCAliber { get; set; } // DT_Min_Ammo_CAliber
        public string ConditionDtMinAmmoCal { get; set; } // Condition_DT_Min_ammo_Cal (length: 3)
        public int HearingTable { get; set; } // hearing_table
        public string Upgrates { get; set; } // Upgrates (length: 150)
        public string FollowUp { get; set; } // Follow_Up (length: 50)
        public string Linked { get; set; } // Linked (length: 50)
    }

    // AnyBoxNameType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AnyBoxNameType
    {
        public int Id { get; set; } // id (Primary key)
        public string NameOfBox { get; set; } // nameOfBox (length: 50)
        public int TypeOfBox { get; set; } // TypeOfBox
        public int? ParentBoxName { get; set; } // ParentBoxName

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AnyBoxNameType> AnyBoxNameTypes { get; set; } // AnyBoxNameType.FK_AnyBoxNameType_AnyBoxNameType_id
        public virtual System.Collections.Generic.ICollection<BoxItem> BoxItems { get; set; } // BoxItem.FK_BoxItem_AnyBoxNameType_id

        // Foreign keys
        public virtual AnyBoxNameType AnyBoxNameType_ParentBoxName { get; set; } // FK_AnyBoxNameType_AnyBoxNameType_id
        public virtual TypeOfBox TypeOfBox_TypeOfBox { get; set; } // FK_AnyBoxNameType_Type_of_Box_id

        public AnyBoxNameType()
        {
            AnyBoxNameTypes = new System.Collections.Generic.List<AnyBoxNameType>();
            BoxItems = new System.Collections.Generic.List<BoxItem>();
        }
    }

    // ARMOUR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Armour
    {
        public int UiIndex { get; set; } // uiIndex (Primary key)
        public int UbArmourClass { get; set; } // ubArmourClass
        public int UbProtection { get; set; } // ubProtection
        public int UbCoverage { get; set; } // ubCoverage
        public int UbDegradePercent { get; set; } // ubDegradePercent
        public bool FlakJacket { get; set; } // FlakJacket
        public bool LeatherJacket { get; set; } // LeatherJacket

        // Foreign keys
        public virtual Item Item { get; set; } // FK_ARMOUR_ITEM_uiIndex

        public Armour()
        {
            FlakJacket = true;
            LeatherJacket = true;
        }
    }

    // Attachment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Attachment
    {
        public int UiIndex { get; set; } // uiIndex (Primary key)
        public string SzAttName { get; set; } // szAttName (length: 80)
        public int RAttachmentClass { get; set; } // rAttachmentClass
        public string Attachmentmount { get; set; } // Attachmentmount (length: 50)
        public bool HiddenAttachment { get; set; } // HiddenAttachment
        public int? NoiseReduction { get; set; } // NoiseReduction
        public bool HideMuzzleFlash { get; set; } // HideMuzzleFlash
        public int? RangeBonus { get; set; } // RangeBonus
        public int? AimBonus { get; set; } // AimBonus
        public int? MinRangeForAimBonus { get; set; } // MinRangeForAimBonus
        public int? MagSizeBonus { get; set; } // MagSizeBonus
        public int? BurstSizeBonus { get; set; } // BurstSizeBonus
        public int? RateOfFireBonus { get; set; } // RateOfFireBonus
        public int? DamageBonus { get; set; } // DamageBonus
        public decimal? ScopeMagFactor { get; set; } // ScopeMagFactor
        public int? HearingRangeBonus { get; set; } // HearingRangeBonus
        public int? VisionRangeBonus { get; set; } // VisionRangeBonus
        public int? NightVisionRangeBonus { get; set; } // NightVisionRangeBonus
        public int? DayVisionRangeBonus { get; set; } // DayVisionRangeBonus
        public int? CaveVisionRangeBonus { get; set; } // CaveVisionRangeBonus
        public int? BrightLightVisionRangeBonus { get; set; } // BrightLightVisionRangeBonus
        public int? PercentTunnelVision { get; set; } // PercentTunnelVision
        public int? FlashLightRange { get; set; } // FlashLightRange
        public int? RecoilModifier { get; set; } // RecoilModifier
        public int GSubAttachClass { get; set; } // G_SubAttachClass
        public int GAttachClass { get; set; } // G_AttachClass
        public int? Darkness { get; set; } // Darkness
        public int? BulkAdd { get; set; } // Bulk_add
        public bool Fix { get; set; } // Fix
        public int? BatTimeWork { get; set; } // BatTimeWork
        public bool Tritium { get; set; } // Tritium
        public int? ScopeMagMin { get; set; } // ScopeMagMin
        public int? ScopeMagMax { get; set; } // ScopeMagMax
        public int? AccAddmax { get; set; } // AccAddmax
        public int IdAttachmentmount { get; set; } // id_Attachmentmount
        public bool ImpVisSights { get; set; } // ImpVisSights
        public bool BlockIronSight { get; set; } // BlockIronSight
        public bool Collimator { get; set; } // Collimator
        public bool Reflex { get; set; } // Reflex
        public bool Targetingprogram { get; set; } // Targetingprogram
        public bool Laserrangefinder { get; set; } // Laserrangefinder
        public int? LaserRFrange { get; set; } // LaserRFrange
        public int? LaserRfAcc { get; set; } // LaserRFAcc
        public int? NightVision { get; set; } // NightVision
        public bool NeedIRillumination { get; set; } // NeedIRillumination
        public bool Infravision { get; set; } // Infravision
        public bool IrFilter { get; set; } // IRFilter
        public int? LightRange { get; set; } // LightRange
        public int? IrLigRange { get; set; } // IRLigRange
        public int? LaserRange { get; set; } // LaserRange
        public string LaserColor { get; set; } // LaserColor (length: 10)
        public decimal? LaserColorEf { get; set; } // LaserColorEf
        public int? UsedBatType { get; set; } // usedBatType

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<GAvAttachClass> GAvAttachClasses { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Attachmentmount Attachmentmount_IdAttachmentmount { get; set; } // FK_Attachment_Attachmentmount
        public virtual Item Item { get; set; } // FK_Attachment_ITEM_uiIndex

        public Attachment()
        {
            RAttachmentClass = 1;
            HiddenAttachment = false;
            HideMuzzleFlash = false;
            GSubAttachClass = 1;
            GAttachClass = 1;
            Fix = false;
            Tritium = false;
            IdAttachmentmount = 1;
            ImpVisSights = false;
            BlockIronSight = false;
            Collimator = false;
            Reflex = false;
            Targetingprogram = false;
            Laserrangefinder = false;
            NeedIRillumination = false;
            Infravision = false;
            IrFilter = false;
            GAvAttachClasses = new System.Collections.Generic.List<GAvAttachClass>();
        }
    }

    // Attachmentmount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Attachmentmount
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public int IdAttacClass { get; set; } // idAttacClass

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Attachment> Attachments { get; set; } // Attachment.FK_Attachment_Attachmentmount
        public virtual System.Collections.Generic.ICollection<AvailableAttachSlot> AvailableAttachSlots { get; set; } // AvailableAttachSlot.FK_AVeAttachmentmount

        // Foreign keys
        public virtual Attachmentslot Attachmentslot { get; set; } // FK_Attachmentmount_NasAttachmentClass1

        public Attachmentmount()
        {
            IdAttacClass = 1;
            Attachments = new System.Collections.Generic.List<Attachment>();
            AvailableAttachSlots = new System.Collections.Generic.List<AvailableAttachSlot>();
        }
    }

    // ATTACHMENTSLOT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Attachmentslot
    {
        public int UiSlotIndex { get; set; } // uiSlotIndex (Primary key)
        public string SzSlotName { get; set; } // szSlotName (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Attachmentmount> Attachmentmounts { get; set; } // Attachmentmount.FK_Attachmentmount_NasAttachmentClass1
        public virtual System.Collections.Generic.ICollection<GSubAttachClass> GSubAttachClasses { get; set; } // G_SubAttachClass.FK_G_SubAttachClass_ATTACHMENTSLOT1

        public Attachmentslot()
        {
            Attachmentmounts = new System.Collections.Generic.List<Attachmentmount>();
            GSubAttachClasses = new System.Collections.Generic.List<GSubAttachClass>();
        }
    }

    // AvailableAttachSlot
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AvailableAttachSlot
    {
        public int Id { get; set; } // id (Primary key)
        public int RItemId { get; set; } // rItemId
        public int RAttachmentslot { get; set; } // rATTACHMENTSLOT
        public int RAttachmentmount { get; set; } // rAttachmentmount

        // Foreign keys
        public virtual Attachmentmount Attachmentmount { get; set; } // FK_AVeAttachmentmount
        public virtual Item Item { get; set; } // FK_AvailableAttachSlot_ITEM_uiIndex
    }

    // Battery
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Battery
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public string SmolName { get; set; } // SmolName (length: 50)
        public string Description { get; set; } // Description (length: 500)
        public decimal? Cpp { get; set; } // CPP
        public decimal? Wpp { get; set; } // WPP
    }

    // BoxItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class BoxItem
    {
        public int Id { get; set; } // id (Primary key)
        public int BoxName { get; set; } // BoxName
        public int Items { get; set; } // Items
        public int CountItems { get; set; } // CountItems

        // Foreign keys
        public virtual AnyBoxNameType AnyBoxNameType { get; set; } // FK_BoxItem_AnyBoxNameType_id
        public virtual Item Item { get; set; } // FK_BoxItem_ITEM_uiIndex

        public BoxItem()
        {
            CountItems = 0;
        }
    }

    // Caliber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Caliber
    {
        public int Id { get; set; } // id (Primary key)
        public string CaliberName { get; set; } // Caliber_name (length: 255)
        public string AltCaliberName { get; set; } // alt_caliber_name (length: 255)
        public string ClassOfCaliber { get; set; } // Class_of_Caliber (length: 50)
        public decimal? DimOfBulletSi { get; set; } // Dim_of_bullet_SI
        public decimal? DimOfBulletUs { get; set; } // Dim_of_bullet_US

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_Calibre

        public Caliber()
        {
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // Advantage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_Advantage
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public string NameCompare { get; set; } // nameCompare (length: 50)
        public string Typeadc { get; set; } // typeadc (length: 50)
        public string Levels { get; set; } // levels (length: 50)
        public string PointsPerLevel { get; set; } // points_per_level (length: 50)
        public string BasePoints { get; set; } // base_points (length: 50)
        public string Reference { get; set; } // reference (length: 50)
        public string Notes { get; set; } // notes (length: 500)
        public string Cr { get; set; } // cr (length: 50)
        public string Versionadv { get; set; } // versionadv (length: 50)
        public string RoundDown { get; set; } // round_down (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_AttributeBonu> CharDB_AttributeBonus { get; set; } // attribute_bonus.FK_attribute_bonus_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_CostReduction> CharDB_CostReductions { get; set; } // cost_reduction.FK_cost_reduction_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_DrBonusDb> CharDB_DrBonusDbs { get; set; } // dr_bonusDB.FK_dr_bonusDB_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsCategory> CharDB_GurpsCategories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CharDB_MeleeWeapon> CharDB_MeleeWeapons { get; set; } // melee_weapon.FK_melee_weapon_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_Modifier> CharDB_Modifiers { get; set; } // modifier.FK_modifier_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; } // prereq_listDB.FK_prereq_listDB_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_RangedWeapon> CharDB_RangedWeapons { get; set; } // ranged_weapon.FK_ranged_weapon_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_SkillBonusDb> CharDB_SkillBonusDbs { get; set; } // skill_bonusDB.FK_skill_bonusDB_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_SpellBonu> CharDB_SpellBonus { get; set; } // spell_bonus.FK_spell_bonus_Advantage_id
        public virtual System.Collections.Generic.ICollection<CharDB_WeaponBonu> CharDB_WeaponBonus { get; set; } // weapon_bonus.FK_weapon_bonus_Advantage_id

        public CharDB_Advantage()
        {
            CharDB_AttributeBonus = new System.Collections.Generic.List<CharDB_AttributeBonu>();
            CharDB_CostReductions = new System.Collections.Generic.List<CharDB_CostReduction>();
            CharDB_DrBonusDbs = new System.Collections.Generic.List<CharDB_DrBonusDb>();
            CharDB_MeleeWeapons = new System.Collections.Generic.List<CharDB_MeleeWeapon>();
            CharDB_Modifiers = new System.Collections.Generic.List<CharDB_Modifier>();
            CharDB_PrereqListDbs = new System.Collections.Generic.List<CharDB_PrereqListDb>();
            CharDB_RangedWeapons = new System.Collections.Generic.List<CharDB_RangedWeapon>();
            CharDB_SkillBonusDbs = new System.Collections.Generic.List<CharDB_SkillBonusDb>();
            CharDB_SpellBonus = new System.Collections.Generic.List<CharDB_SpellBonu>();
            CharDB_WeaponBonus = new System.Collections.Generic.List<CharDB_WeaponBonu>();
            CharDB_GurpsCategories = new System.Collections.Generic.List<CharDB_GurpsCategory>();
        }
    }

    // advantage_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AdvantagePrereq
    {
        public int Id { get; set; } // id (Primary key)
        public string NameCompare { get; set; } // nameCompare (length: 50)
        public string Name { get; set; } // name (length: 50)
        public string NotesCompare { get; set; } // notesCompare (length: 50)
        public string Notes { get; set; } // notes (length: 50)
        public string LevelCompare { get; set; } // levelCompare (length: 50)
        public string Level { get; set; } // level (length: 50)
        public string Has { get; set; } // has (length: 50)
        public int? IdPrqList { get; set; } // idPrqList
        public string Value { get; set; } // Value (length: 50)

        // Foreign keys
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb { get; set; } // FK_advantage_prereq_prereq_listDB_id
    }

    // attribute_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AttributeBonu
    {
        public int Id { get; set; } // id (Primary key)
        public int? FkSkill { get; set; } // FK_Skill
        public int? FkAmount { get; set; } // FK_Amount
        public string AttributeLimitation { get; set; } // AttributeLimitation (length: 50)
        public string AttributeValue { get; set; } // AttributeValue (length: 50)
        public string AmountPerLevel { get; set; } // AmountPer_level (length: 50)
        public string AmountValue { get; set; } // AmountValue (length: 50)
        public int? FkAdvantage { get; set; } // FK_Advantage

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_attribute_bonus_Advantage_id
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill { get; set; } // FK_attribute_bonus_GurpsSkill_id
    }

    // attribute_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AttributePrereq
    {
        public int Id { get; set; } // id (Primary key)
        public string Has { get; set; } // has (length: 50)
        public string Which { get; set; } // which (length: 50)
        public string Compare { get; set; } // compare (length: 50)
        public string CombinedWith { get; set; } // combined_with (length: 50)
        public int? IdPrqList { get; set; } // idPrqList
        public string Value { get; set; } // Value (length: 50)

        // Foreign keys
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb { get; set; } // FK_attribute_prereq_prereq_listDB_id
    }

    // CharacterDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CharacterDb
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 80)
        public int StrengthPoints { get; set; } // StrengthPoints
        public int DexterityPoints { get; set; } // DexterityPoints
        public int IntelligencePoints { get; set; } // IntelligencePoints
        public int HealthPoints { get; set; } // HealthPoints
        public int MaxHpPoints { get; set; } // MaxHPPoints
        public int MaxFpPoints { get; set; } // MaxFPPoints
        public int PerceptionPoints { get; set; } // PerceptionPoints
        public int WillpowerPoints { get; set; } // WillpowerPoints
        public float BasicSpeedPoints { get; set; } // BasicSpeedPoints
        public int BasicMovePoints { get; set; } // BasicMovePoints

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_CharSkill> CharDB_CharSkills { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CharDB_InventoryOfChar> CharDB_InventoryOfChars { get; set; } // InventoryOfChar.FK_InventoryOfChar_CharacterDB_id

        public CharDB_CharacterDb()
        {
            CharDB_CharSkills = new System.Collections.Generic.List<CharDB_CharSkill>();
            CharDB_InventoryOfChars = new System.Collections.Generic.List<CharDB_InventoryOfChar>();
        }
    }

    // CharSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CharSkill
    {
        public int IdSkill { get; set; } // idSkill (Primary key via unique index UK_CharSkill)
        public int IdChar { get; set; } // idChar (Primary key via unique index UK_CharSkill)
        public int? PointOfSkill { get; set; } // PointOfSkill

        // Foreign keys
        public virtual CharDB_CharacterDb CharDB_CharacterDb { get; set; } // FK_CharSkill_CharacterDB_id
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill { get; set; } // FK_CharSkill_GurpsSkill_id

        public CharDB_CharSkill()
        {
            PointOfSkill = 1;
        }
    }

    // contained_weight_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_ContainedWeightPrereq
    {
        public int Id { get; set; } // id (Primary key)
        public string Has { get; set; } // has (length: 50)
        public string Compare { get; set; } // compare (length: 50)
        public string Value { get; set; } // Value (length: 50)
        public int? IdPrqList { get; set; } // idPrqList

        // Foreign keys
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb { get; set; } // FK_contained_weight_prereq_prereq_listDB_id
    }

    // cost_reduction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CostReduction
    {
        public int Id { get; set; } // id (Primary key)
        public string Attribute { get; set; } // attribute (length: 50)
        public string Percentage { get; set; } // percentage (length: 50)
        public int? IdAdv { get; set; } // idAdv

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_cost_reduction_Advantage_id
    }

    // DefaultSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DefaultSkill
    {
        public int IdSkillIn { get; set; } // idSkillIn
        public int? IdSkillOut { get; set; } // idSkillOut
        public int? Modifier { get; set; } // Modifier
        public string Type { get; set; } // type (length: 10)
        public int Id { get; set; } // id (Primary key)

        // Foreign keys
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill_IdSkillIn { get; set; } // FK_DefaultSkill_GurpsSkill_id_in
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill_IdSkillOut { get; set; } // FK_DefaultSkill_GurpsSkill_id_out
    }

    // DefSkillSome
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DefSkillSome
    {
        public int Id { get; set; } // id (Primary key)
        public string NameSkill { get; set; } // nameSkill (length: 50)
        public string Specialization { get; set; } // specialization (length: 50)
        public string Type { get; set; } // type (length: 50)
        public string Modifier { get; set; } // modifier (length: 50)
        public int? IdSkill { get; set; } // idSkill
        public int? IdRangeWeap { get; set; } // idRangeWeap
        public int? IdMeleWeap { get; set; } // idMeleWeap

        // Foreign keys
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill { get; set; } // FK_DefSkillAdv_GurpsSkill_id
        public virtual CharDB_MeleeWeapon CharDB_MeleeWeapon { get; set; } // FK_DefSkillSome_melee_weapon_id
        public virtual CharDB_RangedWeapon CharDB_RangedWeapon { get; set; } // FK_DefSkillAdv_ranged_weapon_id
    }

    // DifficultySkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DifficultySkill
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // Name (length: 50)
        public string Cost { get; set; } // cost (length: 50)
        public string BaseCost { get; set; } // baseCost (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // GurpsSkill.FK_GurpsSkill_Difficulty_id

        public CharDB_DifficultySkill()
        {
            CharDB_GurpsSkills = new System.Collections.Generic.List<CharDB_GurpsSkill>();
        }
    }

    // dr_bonusDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DrBonusDb
    {
        public int Id { get; set; } // id (Primary key)
        public string Location { get; set; } // location (length: 50)
        public string PerLevel { get; set; } // per_level (length: 50)
        public string Value { get; set; } // Value (length: 50)
        public int? IdAdv { get; set; } // idAdv

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_dr_bonusDB_Advantage_id
    }

    // GurpsCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_GurpsCategory
    {
        public int Id { get; set; } // id (Primary key)
        public string NamelCategory { get; set; } // NamelCategory (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_Advantage> CharDB_Advantages { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // Many to many mapping

        public CharDB_GurpsCategory()
        {
            CharDB_Advantages = new System.Collections.Generic.List<CharDB_Advantage>();
            CharDB_GurpsSkills = new System.Collections.Generic.List<CharDB_GurpsSkill>();
        }
    }

    // GurpsSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_GurpsSkill
    {
        public int Id { get; set; } // id (Primary key)
        public string NameSkill { get; set; } // NameSkill (length: 50)
        public string Specialization { get; set; } // Specialization (length: 500)
        public string Difficulty { get; set; } // Difficulty (length: 50)
        public int? Points { get; set; } // Points
        public string Reference { get; set; } // Reference (length: 50)
        public bool? TypeSpecialization { get; set; } // TypeSpecialization
        public int? DefaultModifier { get; set; } // DefaultModifier
        public string Version { get; set; } // version (length: 50)
        public string EncumbrancePenaltyMultiplier { get; set; } // encumbrance_penalty_multiplier (length: 50)
        public string Notes { get; set; } // notes (length: 500)
        public int? IdDifficulty { get; set; } // idDifficulty
        public int? IdSpecialization { get; set; } // idSpecialization
        public int? IdtechLevel { get; set; } // idtech_level
        public string LimitT { get; set; } // limitT (length: 50)
        public string TypeSkTh { get; set; } // TypeSkTh (length: 50)

        // Reverse navigation
        public virtual CharDB_NeedSkill CharDB_NeedSkill { get; set; } // NeedSkill.FK_NeedSkill_GurpsSkill_id_in
        public virtual System.Collections.Generic.ICollection<CharDB_AttributeBonu> CharDB_AttributeBonus { get; set; } // attribute_bonus.FK_attribute_bonus_GurpsSkill_id
        public virtual System.Collections.Generic.ICollection<CharDB_CharSkill> CharDB_CharSkills { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CharDB_DefaultSkill> IdSkillIn { get; set; } // DefaultSkill.FK_DefaultSkill_GurpsSkill_id_in
        public virtual System.Collections.Generic.ICollection<CharDB_DefaultSkill> IdSkillOut { get; set; } // DefaultSkill.FK_DefaultSkill_GurpsSkill_id_out
        public virtual System.Collections.Generic.ICollection<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; } // DefSkillSome.FK_DefSkillAdv_GurpsSkill_id
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsCategory> CharDB_GurpsCategories { get; set; } // Many to many mapping
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // GurpsSkill.FK_GurpsSkill_GurpsSkill_id
        public virtual System.Collections.Generic.ICollection<CharDB_NeedSkill> CharDB_NeedSkills { get; set; } // NeedSkill.FK_NeedSkill_GurpsSkill_id_out
        public virtual System.Collections.Generic.ICollection<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; } // prereq_listDB.FK_prereq_listDB_GurpsSkill_id
        public virtual System.Collections.Generic.ICollection<CharDB_WeaponBonu> CharDB_WeaponBonus { get; set; } // weapon_bonus.FK_weapon_bonus_GurpsSkill_id

        // Foreign keys
        public virtual CharDB_DifficultySkill CharDB_DifficultySkill { get; set; } // FK_GurpsSkill_Difficulty_id
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill_IdSpecialization { get; set; } // FK_GurpsSkill_GurpsSkill_id
        public virtual Tl Tl { get; set; } // FK_GurpsSkill_TL_Id_Tl

        public CharDB_GurpsSkill()
        {
            TypeSpecialization = false;
            CharDB_AttributeBonus = new System.Collections.Generic.List<CharDB_AttributeBonu>();
            CharDB_CharSkills = new System.Collections.Generic.List<CharDB_CharSkill>();
            IdSkillIn = new System.Collections.Generic.List<CharDB_DefaultSkill>();
            IdSkillOut = new System.Collections.Generic.List<CharDB_DefaultSkill>();
            CharDB_DefSkillSomes = new System.Collections.Generic.List<CharDB_DefSkillSome>();
            CharDB_GurpsSkills = new System.Collections.Generic.List<CharDB_GurpsSkill>();
            CharDB_NeedSkills = new System.Collections.Generic.List<CharDB_NeedSkill>();
            CharDB_PrereqListDbs = new System.Collections.Generic.List<CharDB_PrereqListDb>();
            CharDB_WeaponBonus = new System.Collections.Generic.List<CharDB_WeaponBonu>();
            CharDB_GurpsCategories = new System.Collections.Generic.List<CharDB_GurpsCategory>();
        }
    }

    // InventoryOfChar
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_InventoryOfChar
    {
        public int Id { get; set; } // id (Primary key)
        public int IdCharacter { get; set; } // IdCharacter
        public int IdItem { get; set; } // IdItem
        public long Count { get; set; } // Count

        // Foreign keys
        public virtual CharDB_CharacterDb CharDB_CharacterDb { get; set; } // FK_InventoryOfChar_CharacterDB_id
        public virtual Item Item { get; set; } // FK_InventoryOfChar_ITEM_uiIndex

        public CharDB_InventoryOfChar()
        {
            Count = 1;
        }
    }

    // melee_weapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_MeleeWeapon
    {
        public int Id { get; set; } // id (Primary key)
        public string Damage { get; set; } // damage (length: 50)
        public string Strength { get; set; } // strength (length: 50)
        public string Usage { get; set; } // usage (length: 50)
        public string Reach { get; set; } // reach (length: 50)
        public string Parry { get; set; } // parry (length: 50)
        public string Block { get; set; } // block (length: 50)
        public int? IdAdv { get; set; } // idAdv

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; } // DefSkillSome.FK_DefSkillSome_melee_weapon_id

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_melee_weapon_Advantage_id

        public CharDB_MeleeWeapon()
        {
            CharDB_DefSkillSomes = new System.Collections.Generic.List<CharDB_DefSkillSome>();
        }
    }

    // modifier
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_Modifier
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public string NameC { get; set; } // nameC (length: 50)
        public string Notes { get; set; } // notes (length: 50)
        public string NotesC { get; set; } // notesC (length: 50)
        public string Levels { get; set; } // levels (length: 50)
        public string Reference { get; set; } // reference (length: 50)
        public string Affects { get; set; } // affects (length: 50)
        public string Version { get; set; } // version (length: 50)
        public string Enabled { get; set; } // enabled (length: 50)
        public int? IdAdv { get; set; } // idAdv
        public string Cost { get; set; } // Cost (length: 50)
        public string CostType { get; set; } // CostType (length: 50)

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_modifier_Advantage_id
    }

    // NeedSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_NeedSkill
    {
        public int IdSkillIn { get; set; } // idSkillIn
        public int? IdSkillOut { get; set; } // idSkillOut
        public string Needed { get; set; } // Needed (length: 50)

        // Foreign keys
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill_IdSkillIn { get; set; } // FK_NeedSkill_GurpsSkill_id_in
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill_IdSkillOut { get; set; } // FK_NeedSkill_GurpsSkill_id_out
    }

    // prereq_listDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_PrereqListDb
    {
        public int Id { get; set; } // id (Primary key)
        public string All { get; set; } // all (length: 10)
        public string WhenTlCompare { get; set; } // when_tlCompare (length: 10)
        public string WhenTl { get; set; } // when_tl (length: 10)
        public string CollegeCountCompare { get; set; } // college_countCompare (length: 10)
        public string CollegeCount { get; set; } // college_count (length: 10)
        public int? FkPrereqList { get; set; } // FK_prereq_list
        public int? FkSkill { get; set; } // FK_skill
        public int? FkTechnique { get; set; } // FK_technique
        public int? FkAdvantage { get; set; } // FK_Advantage

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_AdvantagePrereq> CharDB_AdvantagePrereqs { get; set; } // advantage_prereq.FK_advantage_prereq_prereq_listDB_id
        public virtual System.Collections.Generic.ICollection<CharDB_AttributePrereq> CharDB_AttributePrereqs { get; set; } // attribute_prereq.FK_attribute_prereq_prereq_listDB_id
        public virtual System.Collections.Generic.ICollection<CharDB_ContainedWeightPrereq> CharDB_ContainedWeightPrereqs { get; set; } // contained_weight_prereq.FK_contained_weight_prereq_prereq_listDB_id
        public virtual System.Collections.Generic.ICollection<CharDB_PrereqListDb> CharDB_PrereqListDbs { get; set; } // prereq_listDB.FK_prereq_listDB_prereq_listDB_id
        public virtual System.Collections.Generic.ICollection<CharDB_SkillPrereqDb> CharDB_SkillPrereqDbs { get; set; } // skill_prereqDB.FK_skill_prereqDB_prereq_listDB_id
        public virtual System.Collections.Generic.ICollection<CharDB_SpellPrereqDb> CharDB_SpellPrereqDbs { get; set; } // spell_prereqDB.FK_spell_prereqDB_prereq_listDB_id

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_prereq_listDB_Advantage_id
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill { get; set; } // FK_prereq_listDB_GurpsSkill_id
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb_FkPrereqList { get; set; } // FK_prereq_listDB_prereq_listDB_id

        public CharDB_PrereqListDb()
        {
            CharDB_AdvantagePrereqs = new System.Collections.Generic.List<CharDB_AdvantagePrereq>();
            CharDB_AttributePrereqs = new System.Collections.Generic.List<CharDB_AttributePrereq>();
            CharDB_ContainedWeightPrereqs = new System.Collections.Generic.List<CharDB_ContainedWeightPrereq>();
            CharDB_PrereqListDbs = new System.Collections.Generic.List<CharDB_PrereqListDb>();
            CharDB_SkillPrereqDbs = new System.Collections.Generic.List<CharDB_SkillPrereqDb>();
            CharDB_SpellPrereqDbs = new System.Collections.Generic.List<CharDB_SpellPrereqDb>();
        }
    }

    // ranged_weapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_RangedWeapon
    {
        public int Id { get; set; } // id (Primary key)
        public string Damage { get; set; } // damage (length: 50)
        public string Strength { get; set; } // strength (length: 50)
        public string Usage { get; set; } // usage (length: 50)
        public string Accuracy { get; set; } // accuracy (length: 50)
        public string Range { get; set; } // range (length: 50)
        public string RateOfFire { get; set; } // rate_of_fire (length: 50)
        public string Recoil { get; set; } // recoil (length: 50)
        public string Shots { get; set; } // shots (length: 50)
        public string Bulk { get; set; } // bulk (length: 50)
        public int? IdAdv { get; set; } // idADV

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_DefSkillSome> CharDB_DefSkillSomes { get; set; } // DefSkillSome.FK_DefSkillAdv_ranged_weapon_id

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_ranged_weapon_Advantage_id

        public CharDB_RangedWeapon()
        {
            CharDB_DefSkillSomes = new System.Collections.Generic.List<CharDB_DefSkillSome>();
        }
    }

    // skill_bonusDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SkillBonusDb
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)
        public string Namecompare { get; set; } // namecompare (length: 50)
        public string Specialization { get; set; } // specialization (length: 50)
        public string Specializationcompare { get; set; } // specializationcompare (length: 50)
        public string AmountPerLevel { get; set; } // AmountPer_level (length: 50)
        public string AmountValue { get; set; } // AmountValue (length: 50)
        public int? FkAdv { get; set; } // FK_Adv

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_skill_bonusDB_Advantage_id
    }

    // skill_prereqDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SkillPrereqDb
    {
        public int Id { get; set; } // id (Primary key)
        public string NameCompare { get; set; } // nameCompare (length: 50)
        public string Name { get; set; } // name (length: 50)
        public string SpecializationCompare { get; set; } // specializationCompare (length: 50)
        public string Specialization { get; set; } // specialization (length: 50)
        public string LevelSpCompare { get; set; } // levelSPCompare (length: 50)
        public string LevelSp { get; set; } // levelSP (length: 50)
        public string Has { get; set; } // has (length: 10)
        public int? IdprereqList { get; set; } // idprereq_list

        // Foreign keys
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb { get; set; } // FK_skill_prereqDB_prereq_listDB_id
    }

    // spell_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SpellBonu
    {
        public int Id { get; set; } // id (Primary key)
        public string SpellName { get; set; } // spell_name (length: 50)
        public string SpellNameC { get; set; } // spell_nameC (length: 50)
        public string CollegeName { get; set; } // college_name (length: 50)
        public string CollegeNameC { get; set; } // college_nameC (length: 50)
        public string AllColleges { get; set; } // all_colleges (length: 50)
        public string AmountperLevel { get; set; } // amountper_level (length: 50)
        public string AmountValue { get; set; } // amountValue (length: 50)
        public int? IdAdv { get; set; } // id_Adv

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_spell_bonus_Advantage_id
    }

    // spell_prereqDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SpellPrereqDb
    {
        public int Id { get; set; } // id (Primary key)
        public string NameCompare { get; set; } // nameCompare (length: 50)
        public string Name { get; set; } // name (length: 50)
        public string CollegeCompare { get; set; } // collegeCompare (length: 50)
        public string College { get; set; } // college (length: 50)
        public string CollegeCountCompare { get; set; } // college_countCompare (length: 50)
        public string CollegeCount { get; set; } // college_count (length: 50)
        public string QuantityCompare { get; set; } // quantityCompare (length: 50)
        public string Quantity { get; set; } // quantity (length: 50)
        public string Anyt { get; set; } // anyt (length: 50)
        public string Has { get; set; } // has (length: 50)
        public int? IdPrqlist { get; set; } // idPrqlist
        public string Value { get; set; } // Value (length: 50)

        // Foreign keys
        public virtual CharDB_PrereqListDb CharDB_PrereqListDb { get; set; } // FK_spell_prereqDB_prereq_listDB_id
    }

    // weapon_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_WeaponBonu
    {
        public int Id { get; set; } // id (Primary key)
        public string NameCompare { get; set; } // nameCompare (length: 50)
        public string Name { get; set; } // name (length: 50)
        public string SpecializationCompare { get; set; } // specializationCompare (length: 50)
        public string Specialization { get; set; } // specialization (length: 50)
        public string LevelCompare { get; set; } // levelCompare (length: 50)
        public string Level { get; set; } // level (length: 50)
        public int? FkSkill { get; set; } // FK_Skill
        public string AmountPerLevel { get; set; } // AmountPer_level (length: 50)
        public string AmountValue { get; set; } // AmountValue (length: 50)
        public int? FkAdv { get; set; } // FK_Adv

        // Foreign keys
        public virtual CharDB_Advantage CharDB_Advantage { get; set; } // FK_weapon_bonus_Advantage_id
        public virtual CharDB_GurpsSkill CharDB_GurpsSkill { get; set; } // FK_weapon_bonus_GurpsSkill_id
    }

    // Clothes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Cloth
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 255)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_ITEM_Clothes

        public Cloth()
        {
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // CombineWeap
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CombineWeap
    {
        public int Id { get; set; } // id (Primary key)
        public int IdWeapon { get; set; } // idWeapon
        public int? ScopeSelect { get; set; } // ScopeSelect
        public int? LaserSelect { get; set; } // LaserSelect
        public int? LightSelect { get; set; } // LightSelect
        public int? BipodSelect { get; set; } // BipodSelect
        public int? SilenserSelect { get; set; } // SilenserSelect
        public int? LauncherSelect { get; set; } // LauncherSelect
        public int? BayonetSelect { get; set; } // BayonetSelect
        public int? MagazineSelect { get; set; } // MagazineSelect
        public int? InternalSelect { get; set; } // InternalSelect
        public int? ExternalSelect { get; set; } // ExternalSelect
        public int? StockSelect { get; set; } // StockSelect
    }

    // The table 'coordinates' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // coordinates
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Coordinate
    {
        public decimal? X1 { get; set; } // x1
        public decimal? X2 { get; set; } // x2
    }

    // Drug
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Drug
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 255)
        public int? IdDrugType { get; set; } // IdDrugType

        // Foreign keys
        public virtual Item Item { get; set; } // FK_Drug_ITEM_uiIndex
    }

    // EXPLOSIVE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Explosive
    {
        public int UiIndex { get; set; } // uiIndex (Primary key)
        public int UbType { get; set; } // ubType
        public int UbDamage { get; set; } // ubDamage
        public int UbStunDamage { get; set; } // ubStunDamage
        public int UbRadius { get; set; } // ubRadius
        public int UbDuration { get; set; } // ubDuration
        public int UbStartRadius { get; set; } // ubStartRadius
        public int UbMagSize { get; set; } // ubMagSize
        public int UsNumFragments { get; set; } // usNumFragments
        public int UbFragType { get; set; } // ubFragType
        public int UbFragDamage { get; set; } // ubFragDamage
        public int UbFragRange { get; set; } // ubFragRange
        public int UbHorizontalDegree { get; set; } // ubHorizontalDegree
        public int UbVerticalDegree { get; set; } // ubVerticalDegree
        public decimal BIndoorModifier { get; set; } // bIndoorModifier
        public bool FExplodeOnImpact { get; set; } // fExplodeOnImpact
        public bool GlGrenade { get; set; } // GLGrenade
        public bool RlGrenade { get; set; } // RLGrenade
        public bool Mine { get; set; } // Mine
        public bool Flare { get; set; } // Flare
        public bool Directional { get; set; } // Directional
        public bool ShapedCharge { get; set; } // ShapedCharge

        // Foreign keys
        public virtual Item Item { get; set; } // FK_EXPLOSIVE_ITEM_uiIndex
    }

    // FOOD
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Food
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_ITEM_Food

        public Food()
        {
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // G_AttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GAttachClass
    {
        public int Id { get; set; } // id (Primary key)
        public string NameClass { get; set; } // name_class (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<GSubAttachClass> GSubAttachClasses { get; set; } // G_SubAttachClass.FK_G_SubAttachClass_G_AttachClass

        public GAttachClass()
        {
            GSubAttachClasses = new System.Collections.Generic.List<GSubAttachClass>();
        }
    }

    // G_AvAttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GAvAttachClass
    {
        public int IdAttach { get; set; } // id_attach (Primary key)
        public int IdGSubClass { get; set; } // id_GSubClass (Primary key)
        public int? IdAttachClass { get; set; } // id_AttachClass

        // Foreign keys
        public virtual Attachment Attachment { get; set; } // FK_G_AvAttachClass_Attachment
        public virtual GSubAttachClass GSubAttachClass { get; set; } // FK_G_AvAttachClass_G_SubAttachClass
    }

    // G_SubAttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GSubAttachClass
    {
        public int Id { get; set; } // id (Primary key)
        public string SubAttachName { get; set; } // SubAttach_name (length: 50)
        public int AttachClass { get; set; } // AttachClass
        public string SubAttachDescription { get; set; } // SubAttachDescription
        public int Attachmentslot { get; set; } // ATTACHMENTSLOT

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<GAvAttachClass> GAvAttachClasses { get; set; } // Many to many mapping

        // Foreign keys
        public virtual Attachmentslot Attachmentslot_Attachmentslot { get; set; } // FK_G_SubAttachClass_ATTACHMENTSLOT1
        public virtual GAttachClass GAttachClass { get; set; } // FK_G_SubAttachClass_G_AttachClass

        public GSubAttachClass()
        {
            GAvAttachClasses = new System.Collections.Generic.List<GAvAttachClass>();
        }
    }

    // GurpsClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GurpsClass
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 16)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ItemSubClass> ItemSubClasses { get; set; } // ItemSubClass.FK_ItemSubClass_WeaponClass_id

        public GurpsClass()
        {
            ItemSubClasses = new System.Collections.Generic.List<ItemSubClass>();
        }
    }

    // ITEM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Item
    {
        public int UiIndex { get; set; } // uiIndex (Primary key)
        public string SzItemName { get; set; } // szItemName (length: 80)
        public string SzLongItemName { get; set; } // szLongItemName (length: 80)
        public string SzItemDesc { get; set; } // szItemDesc
        public int UsItemClass { get; set; } // usItemClass
        public int UbClassIndex { get; set; } // ubClassIndex
        public decimal UbWeight { get; set; } // ubWeight
        public string ItemSize { get; set; } // ItemSize (length: 80)
        public decimal UsPrice { get; set; } // usPrice
        public int? UbCalibre { get; set; } // ubCalibre
        public bool Damageable { get; set; } // Damageable
        public bool Repairable { get; set; } // Repairable
        public bool WaterDamages { get; set; } // WaterDamages
        public bool Metal { get; set; } // Metal
        public bool TwoHanded { get; set; } // TwoHanded
        public bool Electronic { get; set; } // Electronic
        public bool Ht { get; set; } // HT
        public bool Ut { get; set; } // UT
        public bool RemoteTrigger { get; set; } // RemoteTrigger
        public bool GasMask { get; set; } // GasMask
        public bool Alcohol { get; set; } // Alcohol
        public bool Hardware { get; set; } // Hardware
        public bool Medical { get; set; } // Medical
        public bool CamouflageKit { get; set; } // CamouflageKit
        public bool LocksmithKit { get; set; } // LocksmithKit
        public bool Toolkit { get; set; } // Toolkit
        public bool FirstAidKit { get; set; } // FirstAidKit
        public bool MedicalKit { get; set; } // MedicalKit
        public bool WireCutters { get; set; } // WireCutters
        public bool Canteen { get; set; } // Canteen
        public bool GasCan { get; set; } // GasCan
        public bool Batteries { get; set; } // Batteries
        public bool NeedsBatteries { get; set; } // NeedsBatteries
        public bool ContainsLiquid { get; set; } // ContainsLiquid
        public bool MetalDetector { get; set; } // MetalDetector
        public bool FingerPrintId { get; set; } // FingerPrintID
        public bool TripWireActivation { get; set; } // TripWireActivation
        public bool TripWire { get; set; } // TripWire
        public bool Mount { get; set; } // Mount
        public int Tl { get; set; } // TL
        public int Lc { get; set; } // LC
        public string SizeBatteries { get; set; } // SizeBatteries (length: 4)
        public int FoodType { get; set; } // FoodType
        public int LockPickModifier { get; set; } // LockPickModifier
        public int CrowbarModifier { get; set; } // CrowbarModifier
        public int DisarmModifier { get; set; } // DisarmModifier
        public int RepairModifier { get; set; } // RepairModifier
        public int DamageChance { get; set; } // DamageChance
        public int Clothestype { get; set; } // clothestype
        public int DrugType { get; set; } // DrugType
        public byte[] ItemImage { get; set; } // Item_Image
        public int MinSt { get; set; } // minST
        public string Link { get; set; } // Link
        public bool Used { get; set; } // used
        public System.DateTime? Dt { get; set; } // dt
        public int CountOfBat { get; set; } // Count_of_Bat
        public string WorksOnBat { get; set; } // Works_on_Bat (length: 15)

        // Reverse navigation
        public virtual Armour Armour { get; set; } // ARMOUR.FK_ARMOUR_ITEM_uiIndex
        public virtual Attachment Attachment { get; set; } // Attachment.FK_Attachment_ITEM_uiIndex
        public virtual Drug Drug { get; set; } // Drug.FK_Drug_ITEM_uiIndex
        public virtual Explosive Explosive { get; set; } // EXPLOSIVE.FK_EXPLOSIVE_ITEM_uiIndex
        public virtual Loadbearingequipment Loadbearingequipment { get; set; } // LOADBEARINGEQUIPMENT.FK_LOADBEARINGEQUIPMENT_ITEM_uiIndex
        public virtual System.Collections.Generic.ICollection<AvailableAttachSlot> AvailableAttachSlots { get; set; } // AvailableAttachSlot.FK_AvailableAttachSlot_ITEM_uiIndex
        public virtual System.Collections.Generic.ICollection<BoxItem> BoxItems { get; set; } // BoxItem.FK_BoxItem_ITEM_uiIndex
        public virtual System.Collections.Generic.ICollection<CharDB_InventoryOfChar> CharDB_InventoryOfChars { get; set; } // InventoryOfChar.FK_InventoryOfChar_ITEM_uiIndex
        public virtual Weapon Weapon { get; set; } // WEAPON.FK_WEAPON_ITEM_uiIndex

        // Foreign keys
        public virtual Caliber Caliber { get; set; } // FK_Calibre
        public virtual Cloth Cloth { get; set; } // FK_ITEM_Clothes
        public virtual Food Food { get; set; } // FK_ITEM_Food
        public virtual ItemSubClass ItemSubClass { get; set; } // FK_ITEM_ItemSubClass_id
        public virtual Lc Lc_Lc { get; set; } // FK_ITEM_LC
        public virtual Tl Tl_Tl { get; set; } // FK_ITEM_TL

        public Item()
        {
            SzItemName = "1";
            UsItemClass = 1;
            UbClassIndex = 1;
            UbWeight = 1m;
            ItemSize = "1";
            UsPrice = 1m;
            Damageable = true;
            Repairable = true;
            WaterDamages = true;
            Metal = false;
            TwoHanded = false;
            Electronic = false;
            Ht = false;
            Ut = false;
            RemoteTrigger = false;
            GasMask = false;
            Alcohol = false;
            Hardware = false;
            Medical = false;
            CamouflageKit = false;
            LocksmithKit = false;
            Toolkit = false;
            FirstAidKit = false;
            MedicalKit = false;
            WireCutters = false;
            Canteen = false;
            GasCan = false;
            Batteries = false;
            NeedsBatteries = false;
            ContainsLiquid = false;
            MetalDetector = false;
            FingerPrintId = false;
            TripWireActivation = false;
            TripWire = false;
            Mount = false;
            Tl = 2;
            Lc = 1;
            FoodType = 1;
            LockPickModifier = 1;
            CrowbarModifier = 1;
            DisarmModifier = 1;
            RepairModifier = 1;
            DamageChance = 1;
            Clothestype = 1;
            DrugType = 1;
            MinSt = 1;
            Used = false;
            CountOfBat = 1;
            WorksOnBat = "1";
            AvailableAttachSlots = new System.Collections.Generic.List<AvailableAttachSlot>();
            BoxItems = new System.Collections.Generic.List<BoxItem>();
            CharDB_InventoryOfChars = new System.Collections.Generic.List<CharDB_InventoryOfChar>();
        }
    }

    // ItemClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ItemClass
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 70)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<ItemSubClass> ItemSubClasses { get; set; } // ItemSubClass.FK_ItemSubClass_ItemClass_id

        public ItemClass()
        {
            ItemSubClasses = new System.Collections.Generic.List<ItemSubClass>();
        }
    }

    // ItemSubClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ItemSubClass
    {
        public int Id { get; set; } // id (Primary key)
        public string NameSub { get; set; } // NameSub (length: 50)
        public int IdItemClass { get; set; } // IdItemClass
        public string Type { get; set; } // Type (length: 50)
        public int? IdGurpsSubClass { get; set; } // idGurpsSubClass

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_ITEM_ItemSubClass_id

        // Foreign keys
        public virtual GurpsClass GurpsClass { get; set; } // FK_ItemSubClass_WeaponClass_id
        public virtual ItemClass ItemClass { get; set; } // FK_ItemSubClass_ItemClass_id

        public ItemSubClass()
        {
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // LaserColorEf
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class LaserColorEf
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 10)
        public decimal? LaserColorDayEfect { get; set; } // LaserColorDayEfect
    }

    // LC
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Lc
    {
        public int IdLc { get; set; } // Id_LC (Primary key)
        public string NameLc { get; set; } // Name_LC (length: 10)
        public string ShortDes { get; set; } // ShortDes (length: 15)
        public string Description { get; set; } // Description (length: 300)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_ITEM_LC

        public Lc()
        {
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // LOADBEARINGEQUIPMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Loadbearingequipment
    {
        public int LbeIndex { get; set; } // lbeIndex (Primary key)
        public int LbeClass { get; set; } // LBEClass
        public int LbeCombo { get; set; } // lbeCombo
        public int LbeFilledSize { get; set; } // lbeFilledSize
        public int LbeAvailableVolume { get; set; } // lbeAvailableVolume
        public int LbePocketsAvailable { get; set; } // lbePocketsAvailable
        public int LbePocketIndex1 { get; set; } // lbePocketIndex1
        public int LbePocketIndex2 { get; set; } // lbePocketIndex2
        public int LbePocketIndex3 { get; set; } // lbePocketIndex3
        public int LbePocketIndex4 { get; set; } // lbePocketIndex4
        public int LbePocketIndex5 { get; set; } // lbePocketIndex5
        public int LbePocketIndex6 { get; set; } // lbePocketIndex6
        public int LbePocketIndex7 { get; set; } // lbePocketIndex7
        public int LbePocketIndex8 { get; set; } // lbePocketIndex8
        public int LbePocketIndex9 { get; set; } // lbePocketIndex9
        public int LbePocketIndex10 { get; set; } // lbePocketIndex10
        public int LbePocketIndex11 { get; set; } // lbePocketIndex11
        public int LbePocketIndex12 { get; set; } // lbePocketIndex12

        // Foreign keys
        public virtual Item Item { get; set; } // FK_LOADBEARINGEQUIPMENT_ITEM_uiIndex
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class sys_DatabaseFirewallRule
    {
        public int Id { get; set; } // id
        public string Name { get; set; } // name (length: 128)
        public string StartIpAddress { get; set; } // start_ip_address (length: 45)
        public string EndIpAddress { get; set; } // end_ip_address (length: 45)
        public System.DateTime CreateDate { get; set; } // create_date
        public System.DateTime ModifyDate { get; set; } // modify_date
    }

    // TL
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Tl
    {
        public int IdTl { get; set; } // Id_Tl (Primary key)
        public string NameTl { get; set; } // name_TL (length: 50)
        public string Description { get; set; } // Description (length: 60)
        public decimal? StartMoney { get; set; } // StartMoney

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<CharDB_GurpsSkill> CharDB_GurpsSkills { get; set; } // GurpsSkill.FK_GurpsSkill_TL_Id_Tl
        public virtual System.Collections.Generic.ICollection<Item> Items { get; set; } // ITEM.FK_ITEM_TL

        public Tl()
        {
            CharDB_GurpsSkills = new System.Collections.Generic.List<CharDB_GurpsSkill>();
            Items = new System.Collections.Generic.List<Item>();
        }
    }

    // Type_of_Box
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TypeOfBox
    {
        public int Id { get; set; } // id (Primary key)
        public string NameOfType { get; set; } // nameOfType (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<AnyBoxNameType> AnyBoxNameTypes { get; set; } // AnyBoxNameType.FK_AnyBoxNameType_Type_of_Box_id

        public TypeOfBox()
        {
            AnyBoxNameTypes = new System.Collections.Generic.List<AnyBoxNameType>();
        }
    }

    // TypeOfDamage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TypeOfDamage
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 5)
        public string LongName { get; set; } // LongName (length: 30)
        public string MDamage { get; set; } // mDamage (length: 5)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WeaponDamage> IdTypeOfDamage1 { get; set; } // WeaponDamage.FK_WeaponDamage_TypeOfDamage_id1
        public virtual System.Collections.Generic.ICollection<WeaponDamage> IdTypeOfDamage2 { get; set; } // WeaponDamage.FK_WeaponDamage_TypeOfDamage_id2

        public TypeOfDamage()
        {
            IdTypeOfDamage1 = new System.Collections.Generic.List<WeaponDamage>();
            IdTypeOfDamage2 = new System.Collections.Generic.List<WeaponDamage>();
        }
    }

    // WEAPON
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Weapon
    {
        public int UiIndex { get; set; } // uiIndex (Primary key)
        public string SzWeaponName { get; set; } // szWeaponName (length: 80)
        public int DefAcc { get; set; } // DefACC
        public int? AccAddin { get; set; } // ACCAddin
        public decimal HalfRange { get; set; } // Half_Range
        public decimal FullRange { get; set; } // FullRange
        public bool MinRange { get; set; } // MinRange
        public decimal AWeight { get; set; } // AWeight
        public int Rof { get; set; } // ROF
        public bool FullAuto { get; set; } // Full_auto
        public int? RofForSh { get; set; } // ROF_for_Sh
        public int Shots { get; set; } // Shots
        public int TimeForReload { get; set; } // Time_For_reload
        public bool SingleReload { get; set; } // single_reload
        public int Recoil { get; set; } // Recoil
        public bool HeavyWeapon { get; set; } // HeavyWeapon
        public bool AddInChamber { get; set; } // Add_in_Chamber
        public bool CutOffShots { get; set; } // CutOff_shots
        public int CutOffShotsCount { get; set; } // CutOff_shotsCount
        public bool GrenadeLauncher { get; set; } // GrenadeLauncher
        public bool RocketLauncher { get; set; } // RocketLauncher
        public bool Mortar { get; set; } // Mortar
        public bool Cannon { get; set; } // Cannon
        public bool SingleShotRocketLauncher { get; set; } // SingleShot_RocketLauncher
        public bool RocketRifle { get; set; } // RocketRifle
        public bool Bulkfolded { get; set; } // Bulkfolded
        public bool Hcrof { get; set; } // HCROF
        public int HcrofValue { get; set; } // HCROFValue

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WeaponDamage> WeaponDamages { get; set; } // WeaponDamage.FK_WeaponDamage_WEAPON_uiIndex

        // Foreign keys
        public virtual Item Item { get; set; } // FK_WEAPON_ITEM_uiIndex

        public Weapon()
        {
            DefAcc = 1;
            HalfRange = 1m;
            FullRange = 1m;
            MinRange = false;
            AWeight = 1m;
            Rof = 1;
            FullAuto = false;
            Shots = 1;
            TimeForReload = 3;
            SingleReload = false;
            Recoil = 1;
            HeavyWeapon = false;
            AddInChamber = false;
            CutOffShots = false;
            CutOffShotsCount = 0;
            GrenadeLauncher = false;
            RocketLauncher = false;
            Mortar = false;
            Cannon = false;
            SingleShotRocketLauncher = false;
            RocketRifle = false;
            Bulkfolded = false;
            Hcrof = false;
            HcrofValue = 0;
            WeaponDamages = new System.Collections.Generic.List<WeaponDamage>();
        }
    }

    // WeaponAttackType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WeaponAttackType
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (length: 20)
        public string Descr { get; set; } // descr (length: 150)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<WeaponDamage> WeaponDamages { get; set; } // WeaponDamage.FK_WeaponDamage_WeaponAttackType_id

        public WeaponAttackType()
        {
            WeaponDamages = new System.Collections.Generic.List<WeaponDamage>();
        }
    }

    // WeaponDamage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WeaponDamage
    {
        public int Id { get; set; } // id (Primary key)
        public int IdWeapon { get; set; } // idWeapon
        public int IdWeaponAttackType { get; set; } // idWeaponAttackType
        public string Damage { get; set; } // Damage (length: 50)
        public decimal ArmorDivision { get; set; } // ArmorDivision
        public int? IdTypeOfDamage1 { get; set; } // idTypeOfDamage1
        public int? IdTypeOfDamage2 { get; set; } // idTypeOfDamage2
        public string TypeOfDamage1Text { get; set; } // TypeOfDamage1text (length: 50)
        public string TypeOfDamage2Text { get; set; } // TypeOfDamage2text (length: 50)
        public string Descrip { get; set; } // Descrip (length: 50)

        // Foreign keys
        public virtual TypeOfDamage TypeOfDamage_IdTypeOfDamage1 { get; set; } // FK_WeaponDamage_TypeOfDamage_id1
        public virtual TypeOfDamage TypeOfDamage_IdTypeOfDamage2 { get; set; } // FK_WeaponDamage_TypeOfDamage_id2
        public virtual Weapon Weapon { get; set; } // FK_WeaponDamage_WEAPON_uiIndex
        public virtual WeaponAttackType WeaponAttackType { get; set; } // FK_WeaponDamage_WeaponAttackType_id

        public WeaponDamage()
        {
            ArmorDivision = 1m;
        }
    }

    #endregion

    #region POCO Configuration

    // Test
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Adv_TestConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Adv_Test>
    {
        public Adv_TestConfiguration()
            : this("Adv")
        {
        }

        public Adv_TestConfiguration(string schema)
        {
            ToTable("Test", schema);
            HasKey(x => x.Id);

            Property(x => x.Test).HasColumnName(@"test").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Date).HasColumnName(@"date").IsOptional().HasColumnType("datetime");
            Property(x => x.Mark).HasColumnName(@"mark").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IdChar).HasColumnName(@"IdChar").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Adv_TestResult).WithMany(b => b.Adv_Tests).HasForeignKey(c => c.IdChar).WillCascadeOnDelete(false); // FK_Test_TestResult_id
        }
    }

    // TestResult
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Adv_TestResultConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Adv_TestResult>
    {
        public Adv_TestResultConfiguration()
            : this("Adv")
        {
        }

        public Adv_TestResultConfiguration(string schema)
        {
            ToTable("TestResult", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Test).HasColumnName(@"test").IsOptional().HasColumnType("int");
        }
    }

    // AMMOUPGRATES
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AmmoupgrateConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Ammoupgrate>
    {
        public AmmoupgrateConfiguration()
            : this("dbo")
        {
        }

        public AmmoupgrateConfiguration(string schema)
        {
            ToTable("AMMOUPGRATES", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.Shortname).HasColumnName(@"shortname").IsRequired().HasColumnType("nvarchar").HasMaxLength(20);
            Property(x => x.Malf).HasColumnName(@"malf").IsRequired().HasColumnType("int");
            Property(x => x.ArDivX).HasColumnName(@"AR_divX").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.AccAdd).HasColumnName(@"ACC_add").IsRequired().HasColumnType("int");
            Property(x => x.AccX).HasColumnName(@"ACC_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.DamageX).HasColumnName(@"damage_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.DamType).HasColumnName(@"Dam_Type").IsOptional().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.RangeX12).HasColumnName(@"range_x12").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.RangeX).HasColumnName(@"range_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.StX).HasColumnName(@"ST_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.WpsX).HasColumnName(@"WPS_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.CpsX).HasColumnName(@"CPS_x").IsRequired().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.Hearing).HasColumnName(@"Hearing").IsRequired().HasColumnType("int");
            Property(x => x.AmmoClass).HasColumnName(@"Ammo_Class").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.MinCaliber).HasColumnName(@"min_Caliber").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.MaxCalider).HasColumnName(@"Max_Calider").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.DtMinAmmoCAliber).HasColumnName(@"DT_Min_Ammo_CAliber").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.ConditionDtMinAmmoCal).HasColumnName(@"Condition_DT_Min_ammo_Cal").IsOptional().HasColumnType("nvarchar").HasMaxLength(3);
            Property(x => x.HearingTable).HasColumnName(@"hearing_table").IsRequired().HasColumnType("int");
            Property(x => x.Upgrates).HasColumnName(@"Upgrates").IsRequired().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.FollowUp).HasColumnName(@"Follow_Up").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Linked).HasColumnName(@"Linked").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // AnyBoxNameType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AnyBoxNameTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AnyBoxNameType>
    {
        public AnyBoxNameTypeConfiguration()
            : this("dbo")
        {
        }

        public AnyBoxNameTypeConfiguration(string schema)
        {
            ToTable("AnyBoxNameType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameOfBox).HasColumnName(@"nameOfBox").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.TypeOfBox).HasColumnName(@"TypeOfBox").IsRequired().HasColumnType("int");
            Property(x => x.ParentBoxName).HasColumnName(@"ParentBoxName").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.AnyBoxNameType_ParentBoxName).WithMany(b => b.AnyBoxNameTypes).HasForeignKey(c => c.ParentBoxName).WillCascadeOnDelete(false); // FK_AnyBoxNameType_AnyBoxNameType_id
            HasRequired(a => a.TypeOfBox_TypeOfBox).WithMany(b => b.AnyBoxNameTypes).HasForeignKey(c => c.TypeOfBox); // FK_AnyBoxNameType_Type_of_Box_id
        }
    }

    // ARMOUR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ArmourConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Armour>
    {
        public ArmourConfiguration()
            : this("dbo")
        {
        }

        public ArmourConfiguration(string schema)
        {
            ToTable("ARMOUR", schema);
            HasKey(x => x.UiIndex);

            Property(x => x.UiIndex).HasColumnName(@"uiIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UbArmourClass).HasColumnName(@"ubArmourClass").IsRequired().HasColumnType("int");
            Property(x => x.UbProtection).HasColumnName(@"ubProtection").IsRequired().HasColumnType("int");
            Property(x => x.UbCoverage).HasColumnName(@"ubCoverage").IsRequired().HasColumnType("int");
            Property(x => x.UbDegradePercent).HasColumnName(@"ubDegradePercent").IsRequired().HasColumnType("int");
            Property(x => x.FlakJacket).HasColumnName(@"FlakJacket").IsRequired().HasColumnType("bit");
            Property(x => x.LeatherJacket).HasColumnName(@"LeatherJacket").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Item).WithOptional(b => b.Armour); // FK_ARMOUR_ITEM_uiIndex
        }
    }

    // Attachment
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AttachmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Attachment>
    {
        public AttachmentConfiguration()
            : this("dbo")
        {
        }

        public AttachmentConfiguration(string schema)
        {
            ToTable("Attachment", schema);
            HasKey(x => x.UiIndex);

            Property(x => x.UiIndex).HasColumnName(@"uiIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SzAttName).HasColumnName(@"szAttName").IsRequired().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.RAttachmentClass).HasColumnName(@"rAttachmentClass").IsRequired().HasColumnType("int");
            Property(x => x.Attachmentmount).HasColumnName(@"Attachmentmount").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.HiddenAttachment).HasColumnName(@"HiddenAttachment").IsRequired().HasColumnType("bit");
            Property(x => x.NoiseReduction).HasColumnName(@"NoiseReduction").IsOptional().HasColumnType("int");
            Property(x => x.HideMuzzleFlash).HasColumnName(@"HideMuzzleFlash").IsRequired().HasColumnType("bit");
            Property(x => x.RangeBonus).HasColumnName(@"RangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.AimBonus).HasColumnName(@"AimBonus").IsOptional().HasColumnType("int");
            Property(x => x.MinRangeForAimBonus).HasColumnName(@"MinRangeForAimBonus").IsOptional().HasColumnType("int");
            Property(x => x.MagSizeBonus).HasColumnName(@"MagSizeBonus").IsOptional().HasColumnType("int");
            Property(x => x.BurstSizeBonus).HasColumnName(@"BurstSizeBonus").IsOptional().HasColumnType("int");
            Property(x => x.RateOfFireBonus).HasColumnName(@"RateOfFireBonus").IsOptional().HasColumnType("int");
            Property(x => x.DamageBonus).HasColumnName(@"DamageBonus").IsOptional().HasColumnType("int");
            Property(x => x.ScopeMagFactor).HasColumnName(@"ScopeMagFactor").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.HearingRangeBonus).HasColumnName(@"HearingRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.VisionRangeBonus).HasColumnName(@"VisionRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.NightVisionRangeBonus).HasColumnName(@"NightVisionRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.DayVisionRangeBonus).HasColumnName(@"DayVisionRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.CaveVisionRangeBonus).HasColumnName(@"CaveVisionRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.BrightLightVisionRangeBonus).HasColumnName(@"BrightLightVisionRangeBonus").IsOptional().HasColumnType("int");
            Property(x => x.PercentTunnelVision).HasColumnName(@"PercentTunnelVision").IsOptional().HasColumnType("int");
            Property(x => x.FlashLightRange).HasColumnName(@"FlashLightRange").IsOptional().HasColumnType("int");
            Property(x => x.RecoilModifier).HasColumnName(@"RecoilModifier").IsOptional().HasColumnType("int");
            Property(x => x.GSubAttachClass).HasColumnName(@"G_SubAttachClass").IsRequired().HasColumnType("int");
            Property(x => x.GAttachClass).HasColumnName(@"G_AttachClass").IsRequired().HasColumnType("int");
            Property(x => x.Darkness).HasColumnName(@"Darkness").IsOptional().HasColumnType("int");
            Property(x => x.BulkAdd).HasColumnName(@"Bulk_add").IsOptional().HasColumnType("int");
            Property(x => x.Fix).HasColumnName(@"Fix").IsRequired().HasColumnType("bit");
            Property(x => x.BatTimeWork).HasColumnName(@"BatTimeWork").IsOptional().HasColumnType("int");
            Property(x => x.Tritium).HasColumnName(@"Tritium").IsRequired().HasColumnType("bit");
            Property(x => x.ScopeMagMin).HasColumnName(@"ScopeMagMin").IsOptional().HasColumnType("int");
            Property(x => x.ScopeMagMax).HasColumnName(@"ScopeMagMax").IsOptional().HasColumnType("int");
            Property(x => x.AccAddmax).HasColumnName(@"AccAddmax").IsOptional().HasColumnType("int");
            Property(x => x.IdAttachmentmount).HasColumnName(@"id_Attachmentmount").IsRequired().HasColumnType("int");
            Property(x => x.ImpVisSights).HasColumnName(@"ImpVisSights").IsRequired().HasColumnType("bit");
            Property(x => x.BlockIronSight).HasColumnName(@"BlockIronSight").IsRequired().HasColumnType("bit");
            Property(x => x.Collimator).HasColumnName(@"Collimator").IsRequired().HasColumnType("bit");
            Property(x => x.Reflex).HasColumnName(@"Reflex").IsRequired().HasColumnType("bit");
            Property(x => x.Targetingprogram).HasColumnName(@"Targetingprogram").IsRequired().HasColumnType("bit");
            Property(x => x.Laserrangefinder).HasColumnName(@"Laserrangefinder").IsRequired().HasColumnType("bit");
            Property(x => x.LaserRFrange).HasColumnName(@"LaserRFrange").IsOptional().HasColumnType("int");
            Property(x => x.LaserRfAcc).HasColumnName(@"LaserRFAcc").IsOptional().HasColumnType("int");
            Property(x => x.NightVision).HasColumnName(@"NightVision").IsOptional().HasColumnType("int");
            Property(x => x.NeedIRillumination).HasColumnName(@"NeedIRillumination").IsRequired().HasColumnType("bit");
            Property(x => x.Infravision).HasColumnName(@"Infravision").IsRequired().HasColumnType("bit");
            Property(x => x.IrFilter).HasColumnName(@"IRFilter").IsRequired().HasColumnType("bit");
            Property(x => x.LightRange).HasColumnName(@"LightRange").IsOptional().HasColumnType("int");
            Property(x => x.IrLigRange).HasColumnName(@"IRLigRange").IsOptional().HasColumnType("int");
            Property(x => x.LaserRange).HasColumnName(@"LaserRange").IsOptional().HasColumnType("int");
            Property(x => x.LaserColor).HasColumnName(@"LaserColor").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.LaserColorEf).HasColumnName(@"LaserColorEf").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
            Property(x => x.UsedBatType).HasColumnName(@"usedBatType").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Attachmentmount_IdAttachmentmount).WithMany(b => b.Attachments).HasForeignKey(c => c.IdAttachmentmount).WillCascadeOnDelete(false); // FK_Attachment_Attachmentmount
            HasRequired(a => a.Item).WithOptional(b => b.Attachment); // FK_Attachment_ITEM_uiIndex
        }
    }

    // Attachmentmount
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AttachmentmountConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Attachmentmount>
    {
        public AttachmentmountConfiguration()
            : this("dbo")
        {
        }

        public AttachmentmountConfiguration(string schema)
        {
            ToTable("Attachmentmount", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdAttacClass).HasColumnName(@"idAttacClass").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Attachmentslot).WithMany(b => b.Attachmentmounts).HasForeignKey(c => c.IdAttacClass).WillCascadeOnDelete(false); // FK_Attachmentmount_NasAttachmentClass1
        }
    }

    // ATTACHMENTSLOT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AttachmentslotConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Attachmentslot>
    {
        public AttachmentslotConfiguration()
            : this("dbo")
        {
        }

        public AttachmentslotConfiguration(string schema)
        {
            ToTable("ATTACHMENTSLOT", schema);
            HasKey(x => x.UiSlotIndex);

            Property(x => x.UiSlotIndex).HasColumnName(@"uiSlotIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SzSlotName).HasColumnName(@"szSlotName").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // AvailableAttachSlot
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class AvailableAttachSlotConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<AvailableAttachSlot>
    {
        public AvailableAttachSlotConfiguration()
            : this("dbo")
        {
        }

        public AvailableAttachSlotConfiguration(string schema)
        {
            ToTable("AvailableAttachSlot", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RItemId).HasColumnName(@"rItemId").IsRequired().HasColumnType("int");
            Property(x => x.RAttachmentslot).HasColumnName(@"rATTACHMENTSLOT").IsRequired().HasColumnType("int");
            Property(x => x.RAttachmentmount).HasColumnName(@"rAttachmentmount").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Attachmentmount).WithMany(b => b.AvailableAttachSlots).HasForeignKey(c => c.RAttachmentmount).WillCascadeOnDelete(false); // FK_AVeAttachmentmount
            HasRequired(a => a.Item).WithMany(b => b.AvailableAttachSlots).HasForeignKey(c => c.RItemId).WillCascadeOnDelete(false); // FK_AvailableAttachSlot_ITEM_uiIndex
        }
    }

    // Battery
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class BatteryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Battery>
    {
        public BatteryConfiguration()
            : this("dbo")
        {
        }

        public BatteryConfiguration(string schema)
        {
            ToTable("Battery", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SmolName).HasColumnName(@"SmolName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.Cpp).HasColumnName(@"CPP").IsOptional().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.Wpp).HasColumnName(@"WPP").IsOptional().HasColumnType("decimal").HasPrecision(7,3);
        }
    }

    // BoxItem
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class BoxItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BoxItem>
    {
        public BoxItemConfiguration()
            : this("dbo")
        {
        }

        public BoxItemConfiguration(string schema)
        {
            ToTable("BoxItem", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BoxName).HasColumnName(@"BoxName").IsRequired().HasColumnType("int");
            Property(x => x.Items).HasColumnName(@"Items").IsRequired().HasColumnType("int");
            Property(x => x.CountItems).HasColumnName(@"CountItems").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.AnyBoxNameType).WithMany(b => b.BoxItems).HasForeignKey(c => c.BoxName); // FK_BoxItem_AnyBoxNameType_id
            HasRequired(a => a.Item).WithMany(b => b.BoxItems).HasForeignKey(c => c.Items).WillCascadeOnDelete(false); // FK_BoxItem_ITEM_uiIndex
        }
    }

    // Caliber
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CaliberConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Caliber>
    {
        public CaliberConfiguration()
            : this("dbo")
        {
        }

        public CaliberConfiguration(string schema)
        {
            ToTable("Caliber", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.CaliberName).HasColumnName(@"Caliber_name").IsRequired().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.AltCaliberName).HasColumnName(@"alt_caliber_name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.ClassOfCaliber).HasColumnName(@"Class_of_Caliber").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.DimOfBulletSi).HasColumnName(@"Dim_of_bullet_SI").IsOptional().HasColumnType("decimal").HasPrecision(8,4);
            Property(x => x.DimOfBulletUs).HasColumnName(@"Dim_of_bullet_US").IsOptional().HasColumnType("decimal").HasPrecision(8,4);
        }
    }

    // Advantage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AdvantageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_Advantage>
    {
        public CharDB_AdvantageConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_AdvantageConfiguration(string schema)
        {
            ToTable("Advantage", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.NameCompare).HasColumnName(@"nameCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Typeadc).HasColumnName(@"typeadc").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Levels).HasColumnName(@"levels").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PointsPerLevel).HasColumnName(@"points_per_level").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BasePoints).HasColumnName(@"base_points").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Reference).HasColumnName(@"reference").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Notes).HasColumnName(@"notes").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.Cr).HasColumnName(@"cr").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Versionadv).HasColumnName(@"versionadv").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.RoundDown).HasColumnName(@"round_down").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            HasMany(t => t.CharDB_GurpsCategories).WithMany(t => t.CharDB_Advantages).Map(m =>
            {
                m.ToTable("AdvantageCategory88", "CharDB");
                m.MapLeftKey("idAdvantage");
                m.MapRightKey("idGurpsCategory");
            });
        }
    }

    // advantage_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AdvantagePrereqConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_AdvantagePrereq>
    {
        public CharDB_AdvantagePrereqConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_AdvantagePrereqConfiguration(string schema)
        {
            ToTable("advantage_prereq", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameCompare).HasColumnName(@"nameCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.NotesCompare).HasColumnName(@"notesCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Notes).HasColumnName(@"notes").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LevelCompare).HasColumnName(@"levelCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Level).HasColumnName(@"level").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Has).HasColumnName(@"has").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdPrqList).HasColumnName(@"idPrqList").IsOptional().HasColumnType("int");
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_PrereqListDb).WithMany(b => b.CharDB_AdvantagePrereqs).HasForeignKey(c => c.IdPrqList); // FK_advantage_prereq_prereq_listDB_id
        }
    }

    // attribute_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AttributeBonuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_AttributeBonu>
    {
        public CharDB_AttributeBonuConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_AttributeBonuConfiguration(string schema)
        {
            ToTable("attribute_bonus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.FkSkill).HasColumnName(@"FK_Skill").IsOptional().HasColumnType("int");
            Property(x => x.FkAmount).HasColumnName(@"FK_Amount").IsOptional().HasColumnType("int");
            Property(x => x.AttributeLimitation).HasColumnName(@"AttributeLimitation").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AttributeValue).HasColumnName(@"AttributeValue").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AmountPerLevel).HasColumnName(@"AmountPer_level").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AmountValue).HasColumnName(@"AmountValue").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FkAdvantage).HasColumnName(@"FK_Advantage").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_AttributeBonus).HasForeignKey(c => c.FkAdvantage); // FK_attribute_bonus_Advantage_id
            HasOptional(a => a.CharDB_GurpsSkill).WithMany(b => b.CharDB_AttributeBonus).HasForeignKey(c => c.FkSkill); // FK_attribute_bonus_GurpsSkill_id
        }
    }

    // attribute_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_AttributePrereqConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_AttributePrereq>
    {
        public CharDB_AttributePrereqConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_AttributePrereqConfiguration(string schema)
        {
            ToTable("attribute_prereq", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Has).HasColumnName(@"has").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Which).HasColumnName(@"which").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Compare).HasColumnName(@"compare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CombinedWith).HasColumnName(@"combined_with").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdPrqList).HasColumnName(@"idPrqList").IsOptional().HasColumnType("int");
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_PrereqListDb).WithMany(b => b.CharDB_AttributePrereqs).HasForeignKey(c => c.IdPrqList); // FK_attribute_prereq_prereq_listDB_id
        }
    }

    // CharacterDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CharacterDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_CharacterDb>
    {
        public CharDB_CharacterDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_CharacterDbConfiguration(string schema)
        {
            ToTable("CharacterDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.StrengthPoints).HasColumnName(@"StrengthPoints").IsRequired().HasColumnType("int");
            Property(x => x.DexterityPoints).HasColumnName(@"DexterityPoints").IsRequired().HasColumnType("int");
            Property(x => x.IntelligencePoints).HasColumnName(@"IntelligencePoints").IsRequired().HasColumnType("int");
            Property(x => x.HealthPoints).HasColumnName(@"HealthPoints").IsRequired().HasColumnType("int");
            Property(x => x.MaxHpPoints).HasColumnName(@"MaxHPPoints").IsRequired().HasColumnType("int");
            Property(x => x.MaxFpPoints).HasColumnName(@"MaxFPPoints").IsRequired().HasColumnType("int");
            Property(x => x.PerceptionPoints).HasColumnName(@"PerceptionPoints").IsRequired().HasColumnType("int");
            Property(x => x.WillpowerPoints).HasColumnName(@"WillpowerPoints").IsRequired().HasColumnType("int");
            Property(x => x.BasicSpeedPoints).HasColumnName(@"BasicSpeedPoints").IsRequired().HasColumnType("real");
            Property(x => x.BasicMovePoints).HasColumnName(@"BasicMovePoints").IsRequired().HasColumnType("int");
        }
    }

    // CharSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CharSkillConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_CharSkill>
    {
        public CharDB_CharSkillConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_CharSkillConfiguration(string schema)
        {
            ToTable("CharSkill", schema);
            HasKey(x => new { x.IdSkill, x.IdChar });

            Property(x => x.IdSkill).HasColumnName(@"idSkill").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdChar).HasColumnName(@"idChar").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PointOfSkill).HasColumnName(@"PointOfSkill").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.CharDB_CharacterDb).WithMany(b => b.CharDB_CharSkills).HasForeignKey(c => c.IdChar); // FK_CharSkill_CharacterDB_id
            HasRequired(a => a.CharDB_GurpsSkill).WithMany(b => b.CharDB_CharSkills).HasForeignKey(c => c.IdSkill); // FK_CharSkill_GurpsSkill_id
        }
    }

    // contained_weight_prereq
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_ContainedWeightPrereqConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_ContainedWeightPrereq>
    {
        public CharDB_ContainedWeightPrereqConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_ContainedWeightPrereqConfiguration(string schema)
        {
            ToTable("contained_weight_prereq", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Has).HasColumnName(@"has").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Compare).HasColumnName(@"compare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdPrqList).HasColumnName(@"idPrqList").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_PrereqListDb).WithMany(b => b.CharDB_ContainedWeightPrereqs).HasForeignKey(c => c.IdPrqList); // FK_contained_weight_prereq_prereq_listDB_id
        }
    }

    // cost_reduction
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_CostReductionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_CostReduction>
    {
        public CharDB_CostReductionConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_CostReductionConfiguration(string schema)
        {
            ToTable("cost_reduction", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Attribute).HasColumnName(@"attribute").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Percentage).HasColumnName(@"percentage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"idAdv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_CostReductions).HasForeignKey(c => c.IdAdv); // FK_cost_reduction_Advantage_id
        }
    }

    // DefaultSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DefaultSkillConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_DefaultSkill>
    {
        public CharDB_DefaultSkillConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_DefaultSkillConfiguration(string schema)
        {
            ToTable("DefaultSkill", schema);
            HasKey(x => x.Id);

            Property(x => x.IdSkillIn).HasColumnName(@"idSkillIn").IsRequired().HasColumnType("int");
            Property(x => x.IdSkillOut).HasColumnName(@"idSkillOut").IsOptional().HasColumnType("int");
            Property(x => x.Modifier).HasColumnName(@"Modifier").IsOptional().HasColumnType("int");
            Property(x => x.Type).HasColumnName(@"type").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);

            // Foreign keys
            HasOptional(a => a.CharDB_GurpsSkill_IdSkillOut).WithMany(b => b.IdSkillOut).HasForeignKey(c => c.IdSkillOut).WillCascadeOnDelete(false); // FK_DefaultSkill_GurpsSkill_id_out
            HasRequired(a => a.CharDB_GurpsSkill_IdSkillIn).WithMany(b => b.IdSkillIn).HasForeignKey(c => c.IdSkillIn); // FK_DefaultSkill_GurpsSkill_id_in
        }
    }

    // DefSkillSome
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DefSkillSomeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_DefSkillSome>
    {
        public CharDB_DefSkillSomeConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_DefSkillSomeConfiguration(string schema)
        {
            ToTable("DefSkillSome", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameSkill).HasColumnName(@"nameSkill").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Specialization).HasColumnName(@"specialization").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Type).HasColumnName(@"type").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Modifier).HasColumnName(@"modifier").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdSkill).HasColumnName(@"idSkill").IsOptional().HasColumnType("int");
            Property(x => x.IdRangeWeap).HasColumnName(@"idRangeWeap").IsOptional().HasColumnType("int");
            Property(x => x.IdMeleWeap).HasColumnName(@"idMeleWeap").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_GurpsSkill).WithMany(b => b.CharDB_DefSkillSomes).HasForeignKey(c => c.IdSkill); // FK_DefSkillAdv_GurpsSkill_id
            HasOptional(a => a.CharDB_MeleeWeapon).WithMany(b => b.CharDB_DefSkillSomes).HasForeignKey(c => c.IdMeleWeap).WillCascadeOnDelete(false); // FK_DefSkillSome_melee_weapon_id
            HasOptional(a => a.CharDB_RangedWeapon).WithMany(b => b.CharDB_DefSkillSomes).HasForeignKey(c => c.IdRangeWeap); // FK_DefSkillAdv_ranged_weapon_id
        }
    }

    // DifficultySkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DifficultySkillConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_DifficultySkill>
    {
        public CharDB_DifficultySkillConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_DifficultySkillConfiguration(string schema)
        {
            ToTable("DifficultySkill", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"Name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Cost).HasColumnName(@"cost").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BaseCost).HasColumnName(@"baseCost").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // dr_bonusDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_DrBonusDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_DrBonusDb>
    {
        public CharDB_DrBonusDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_DrBonusDbConfiguration(string schema)
        {
            ToTable("dr_bonusDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Location).HasColumnName(@"location").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.PerLevel).HasColumnName(@"per_level").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"idAdv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_DrBonusDbs).HasForeignKey(c => c.IdAdv); // FK_dr_bonusDB_Advantage_id
        }
    }

    // GurpsCategory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_GurpsCategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_GurpsCategory>
    {
        public CharDB_GurpsCategoryConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_GurpsCategoryConfiguration(string schema)
        {
            ToTable("GurpsCategory", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NamelCategory).HasColumnName(@"NamelCategory").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // GurpsSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_GurpsSkillConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_GurpsSkill>
    {
        public CharDB_GurpsSkillConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_GurpsSkillConfiguration(string schema)
        {
            ToTable("GurpsSkill", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameSkill).HasColumnName(@"NameSkill").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Specialization).HasColumnName(@"Specialization").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.Difficulty).HasColumnName(@"Difficulty").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Points).HasColumnName(@"Points").IsOptional().HasColumnType("int");
            Property(x => x.Reference).HasColumnName(@"Reference").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TypeSpecialization).HasColumnName(@"TypeSpecialization").IsOptional().HasColumnType("bit");
            Property(x => x.DefaultModifier).HasColumnName(@"DefaultModifier").IsOptional().HasColumnType("int");
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.EncumbrancePenaltyMultiplier).HasColumnName(@"encumbrance_penalty_multiplier").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Notes).HasColumnName(@"notes").IsOptional().HasColumnType("nvarchar").HasMaxLength(500);
            Property(x => x.IdDifficulty).HasColumnName(@"idDifficulty").IsOptional().HasColumnType("int");
            Property(x => x.IdSpecialization).HasColumnName(@"idSpecialization").IsOptional().HasColumnType("int");
            Property(x => x.IdtechLevel).HasColumnName(@"idtech_level").IsOptional().HasColumnType("int");
            Property(x => x.LimitT).HasColumnName(@"limitT").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TypeSkTh).HasColumnName(@"TypeSkTh").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_DifficultySkill).WithMany(b => b.CharDB_GurpsSkills).HasForeignKey(c => c.IdDifficulty).WillCascadeOnDelete(false); // FK_GurpsSkill_Difficulty_id
            HasOptional(a => a.CharDB_GurpsSkill_IdSpecialization).WithMany(b => b.CharDB_GurpsSkills).HasForeignKey(c => c.IdSpecialization).WillCascadeOnDelete(false); // FK_GurpsSkill_GurpsSkill_id
            HasOptional(a => a.Tl).WithMany(b => b.CharDB_GurpsSkills).HasForeignKey(c => c.IdtechLevel).WillCascadeOnDelete(false); // FK_GurpsSkill_TL_Id_Tl
            HasMany(t => t.CharDB_GurpsCategories).WithMany(t => t.CharDB_GurpsSkills).Map(m =>
            {
                m.ToTable("GurpsSkillCategory88", "CharDB");
                m.MapLeftKey("idSkill");
                m.MapRightKey("idSkillCategory");
            });
        }
    }

    // InventoryOfChar
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_InventoryOfCharConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_InventoryOfChar>
    {
        public CharDB_InventoryOfCharConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_InventoryOfCharConfiguration(string schema)
        {
            ToTable("InventoryOfChar", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdCharacter).HasColumnName(@"IdCharacter").IsRequired().HasColumnType("int");
            Property(x => x.IdItem).HasColumnName(@"IdItem").IsRequired().HasColumnType("int");
            Property(x => x.Count).HasColumnName(@"Count").IsRequired().HasColumnType("bigint");

            // Foreign keys
            HasRequired(a => a.CharDB_CharacterDb).WithMany(b => b.CharDB_InventoryOfChars).HasForeignKey(c => c.IdCharacter); // FK_InventoryOfChar_CharacterDB_id
            HasRequired(a => a.Item).WithMany(b => b.CharDB_InventoryOfChars).HasForeignKey(c => c.IdItem); // FK_InventoryOfChar_ITEM_uiIndex
        }
    }

    // melee_weapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_MeleeWeaponConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_MeleeWeapon>
    {
        public CharDB_MeleeWeaponConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_MeleeWeaponConfiguration(string schema)
        {
            ToTable("melee_weapon", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Damage).HasColumnName(@"damage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Strength).HasColumnName(@"strength").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Usage).HasColumnName(@"usage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Reach).HasColumnName(@"reach").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Parry).HasColumnName(@"parry").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Block).HasColumnName(@"block").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"idAdv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_MeleeWeapons).HasForeignKey(c => c.IdAdv); // FK_melee_weapon_Advantage_id
        }
    }

    // modifier
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_ModifierConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_Modifier>
    {
        public CharDB_ModifierConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_ModifierConfiguration(string schema)
        {
            ToTable("modifier", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.NameC).HasColumnName(@"nameC").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Notes).HasColumnName(@"notes").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.NotesC).HasColumnName(@"notesC").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Levels).HasColumnName(@"levels").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Reference).HasColumnName(@"reference").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Affects).HasColumnName(@"affects").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Enabled).HasColumnName(@"enabled").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"idAdv").IsOptional().HasColumnType("int");
            Property(x => x.Cost).HasColumnName(@"Cost").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.CostType).HasColumnName(@"CostType").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_Modifiers).HasForeignKey(c => c.IdAdv).WillCascadeOnDelete(false); // FK_modifier_Advantage_id
        }
    }

    // NeedSkill
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_NeedSkillConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_NeedSkill>
    {
        public CharDB_NeedSkillConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_NeedSkillConfiguration(string schema)
        {
            ToTable("NeedSkill", schema);
            HasKey(x => x.IdSkillIn);

            Property(x => x.IdSkillIn).HasColumnName(@"idSkillIn").IsRequired().HasColumnType("int");
            Property(x => x.IdSkillOut).HasColumnName(@"idSkillOut").IsOptional().HasColumnType("int");
            Property(x => x.Needed).HasColumnName(@"Needed").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_GurpsSkill_IdSkillOut).WithMany(b => b.CharDB_NeedSkills).HasForeignKey(c => c.IdSkillOut).WillCascadeOnDelete(false); // FK_NeedSkill_GurpsSkill_id_out
            HasRequired(a => a.CharDB_GurpsSkill_IdSkillIn).WithOptional(b => b.CharDB_NeedSkill); // FK_NeedSkill_GurpsSkill_id_in
        }
    }

    // prereq_listDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_PrereqListDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_PrereqListDb>
    {
        public CharDB_PrereqListDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_PrereqListDbConfiguration(string schema)
        {
            ToTable("prereq_listDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.All).HasColumnName(@"all").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.WhenTlCompare).HasColumnName(@"when_tlCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.WhenTl).HasColumnName(@"when_tl").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.CollegeCountCompare).HasColumnName(@"college_countCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.CollegeCount).HasColumnName(@"college_count").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.FkPrereqList).HasColumnName(@"FK_prereq_list").IsOptional().HasColumnType("int");
            Property(x => x.FkSkill).HasColumnName(@"FK_skill").IsOptional().HasColumnType("int");
            Property(x => x.FkTechnique).HasColumnName(@"FK_technique").IsOptional().HasColumnType("int");
            Property(x => x.FkAdvantage).HasColumnName(@"FK_Advantage").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_PrereqListDbs).HasForeignKey(c => c.FkAdvantage); // FK_prereq_listDB_Advantage_id
            HasOptional(a => a.CharDB_GurpsSkill).WithMany(b => b.CharDB_PrereqListDbs).HasForeignKey(c => c.FkSkill); // FK_prereq_listDB_GurpsSkill_id
            HasOptional(a => a.CharDB_PrereqListDb_FkPrereqList).WithMany(b => b.CharDB_PrereqListDbs).HasForeignKey(c => c.FkPrereqList).WillCascadeOnDelete(false); // FK_prereq_listDB_prereq_listDB_id
        }
    }

    // ranged_weapon
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_RangedWeaponConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_RangedWeapon>
    {
        public CharDB_RangedWeaponConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_RangedWeaponConfiguration(string schema)
        {
            ToTable("ranged_weapon", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Damage).HasColumnName(@"damage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Strength).HasColumnName(@"strength").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Usage).HasColumnName(@"usage").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Accuracy).HasColumnName(@"accuracy").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Range).HasColumnName(@"range").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.RateOfFire).HasColumnName(@"rate_of_fire").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Recoil).HasColumnName(@"recoil").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Shots).HasColumnName(@"shots").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Bulk).HasColumnName(@"bulk").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"idADV").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_RangedWeapons).HasForeignKey(c => c.IdAdv); // FK_ranged_weapon_Advantage_id
        }
    }

    // skill_bonusDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SkillBonusDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_SkillBonusDb>
    {
        public CharDB_SkillBonusDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_SkillBonusDbConfiguration(string schema)
        {
            ToTable("skill_bonusDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Namecompare).HasColumnName(@"namecompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Specialization).HasColumnName(@"specialization").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Specializationcompare).HasColumnName(@"specializationcompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AmountPerLevel).HasColumnName(@"AmountPer_level").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AmountValue).HasColumnName(@"AmountValue").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FkAdv).HasColumnName(@"FK_Adv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_SkillBonusDbs).HasForeignKey(c => c.FkAdv); // FK_skill_bonusDB_Advantage_id
        }
    }

    // skill_prereqDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SkillPrereqDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_SkillPrereqDb>
    {
        public CharDB_SkillPrereqDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_SkillPrereqDbConfiguration(string schema)
        {
            ToTable("skill_prereqDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameCompare).HasColumnName(@"nameCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.SpecializationCompare).HasColumnName(@"specializationCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Specialization).HasColumnName(@"specialization").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LevelSpCompare).HasColumnName(@"levelSPCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.LevelSp).HasColumnName(@"levelSP").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Has).HasColumnName(@"has").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.IdprereqList).HasColumnName(@"idprereq_list").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_PrereqListDb).WithMany(b => b.CharDB_SkillPrereqDbs).HasForeignKey(c => c.IdprereqList); // FK_skill_prereqDB_prereq_listDB_id
        }
    }

    // spell_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SpellBonuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_SpellBonu>
    {
        public CharDB_SpellBonuConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_SpellBonuConfiguration(string schema)
        {
            ToTable("spell_bonus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SpellName).HasColumnName(@"spell_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.SpellNameC).HasColumnName(@"spell_nameC").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CollegeName).HasColumnName(@"college_name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CollegeNameC).HasColumnName(@"college_nameC").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AllColleges).HasColumnName(@"all_colleges").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AmountperLevel).HasColumnName(@"amountper_level").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.AmountValue).HasColumnName(@"amountValue").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdAdv).HasColumnName(@"id_Adv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_SpellBonus).HasForeignKey(c => c.IdAdv); // FK_spell_bonus_Advantage_id
        }
    }

    // spell_prereqDB
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_SpellPrereqDbConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_SpellPrereqDb>
    {
        public CharDB_SpellPrereqDbConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_SpellPrereqDbConfiguration(string schema)
        {
            ToTable("spell_prereqDB", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameCompare).HasColumnName(@"nameCompare").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CollegeCompare).HasColumnName(@"collegeCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.College).HasColumnName(@"college").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CollegeCountCompare).HasColumnName(@"college_countCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.CollegeCount).HasColumnName(@"college_count").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.QuantityCompare).HasColumnName(@"quantityCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Quantity).HasColumnName(@"quantity").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Anyt).HasColumnName(@"anyt").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Has).HasColumnName(@"has").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.IdPrqlist).HasColumnName(@"idPrqlist").IsOptional().HasColumnType("int");
            Property(x => x.Value).HasColumnName(@"Value").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.CharDB_PrereqListDb).WithMany(b => b.CharDB_SpellPrereqDbs).HasForeignKey(c => c.IdPrqlist); // FK_spell_prereqDB_prereq_listDB_id
        }
    }

    // weapon_bonus
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CharDB_WeaponBonuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CharDB_WeaponBonu>
    {
        public CharDB_WeaponBonuConfiguration()
            : this("CharDB")
        {
        }

        public CharDB_WeaponBonuConfiguration(string schema)
        {
            ToTable("weapon_bonus", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameCompare).HasColumnName(@"nameCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.SpecializationCompare).HasColumnName(@"specializationCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Specialization).HasColumnName(@"specialization").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.LevelCompare).HasColumnName(@"levelCompare").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.Level).HasColumnName(@"level").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
            Property(x => x.FkSkill).HasColumnName(@"FK_Skill").IsOptional().HasColumnType("int");
            Property(x => x.AmountPerLevel).HasColumnName(@"AmountPer_level").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AmountValue).HasColumnName(@"AmountValue").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.FkAdv).HasColumnName(@"FK_Adv").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.CharDB_Advantage).WithMany(b => b.CharDB_WeaponBonus).HasForeignKey(c => c.FkAdv); // FK_weapon_bonus_Advantage_id
            HasOptional(a => a.CharDB_GurpsSkill).WithMany(b => b.CharDB_WeaponBonus).HasForeignKey(c => c.FkSkill); // FK_weapon_bonus_GurpsSkill_id
        }
    }

    // Clothes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ClothConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Cloth>
    {
        public ClothConfiguration()
            : this("dbo")
        {
        }

        public ClothConfiguration(string schema)
        {
            ToTable("Clothes", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
        }
    }

    // CombineWeap
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CombineWeapConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CombineWeap>
    {
        public CombineWeapConfiguration()
            : this("dbo")
        {
        }

        public CombineWeapConfiguration(string schema)
        {
            ToTable("CombineWeap", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IdWeapon).HasColumnName(@"idWeapon").IsRequired().HasColumnType("int");
            Property(x => x.ScopeSelect).HasColumnName(@"ScopeSelect").IsOptional().HasColumnType("int");
            Property(x => x.LaserSelect).HasColumnName(@"LaserSelect").IsOptional().HasColumnType("int");
            Property(x => x.LightSelect).HasColumnName(@"LightSelect").IsOptional().HasColumnType("int");
            Property(x => x.BipodSelect).HasColumnName(@"BipodSelect").IsOptional().HasColumnType("int");
            Property(x => x.SilenserSelect).HasColumnName(@"SilenserSelect").IsOptional().HasColumnType("int");
            Property(x => x.LauncherSelect).HasColumnName(@"LauncherSelect").IsOptional().HasColumnType("int");
            Property(x => x.BayonetSelect).HasColumnName(@"BayonetSelect").IsOptional().HasColumnType("int");
            Property(x => x.MagazineSelect).HasColumnName(@"MagazineSelect").IsOptional().HasColumnType("int");
            Property(x => x.InternalSelect).HasColumnName(@"InternalSelect").IsOptional().HasColumnType("int");
            Property(x => x.ExternalSelect).HasColumnName(@"ExternalSelect").IsOptional().HasColumnType("int");
            Property(x => x.StockSelect).HasColumnName(@"StockSelect").IsOptional().HasColumnType("int");
        }
    }

    // Drug
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class DrugConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Drug>
    {
        public DrugConfiguration()
            : this("dbo")
        {
        }

        public DrugConfiguration(string schema)
        {
            ToTable("Drug", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(255);
            Property(x => x.IdDrugType).HasColumnName(@"IdDrugType").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Item).WithOptional(b => b.Drug).WillCascadeOnDelete(false); // FK_Drug_ITEM_uiIndex
        }
    }

    // EXPLOSIVE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ExplosiveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Explosive>
    {
        public ExplosiveConfiguration()
            : this("dbo")
        {
        }

        public ExplosiveConfiguration(string schema)
        {
            ToTable("EXPLOSIVE", schema);
            HasKey(x => x.UiIndex);

            Property(x => x.UiIndex).HasColumnName(@"uiIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.UbType).HasColumnName(@"ubType").IsRequired().HasColumnType("int");
            Property(x => x.UbDamage).HasColumnName(@"ubDamage").IsRequired().HasColumnType("int");
            Property(x => x.UbStunDamage).HasColumnName(@"ubStunDamage").IsRequired().HasColumnType("int");
            Property(x => x.UbRadius).HasColumnName(@"ubRadius").IsRequired().HasColumnType("int");
            Property(x => x.UbDuration).HasColumnName(@"ubDuration").IsRequired().HasColumnType("int");
            Property(x => x.UbStartRadius).HasColumnName(@"ubStartRadius").IsRequired().HasColumnType("int");
            Property(x => x.UbMagSize).HasColumnName(@"ubMagSize").IsRequired().HasColumnType("int");
            Property(x => x.UsNumFragments).HasColumnName(@"usNumFragments").IsRequired().HasColumnType("int");
            Property(x => x.UbFragType).HasColumnName(@"ubFragType").IsRequired().HasColumnType("int");
            Property(x => x.UbFragDamage).HasColumnName(@"ubFragDamage").IsRequired().HasColumnType("int");
            Property(x => x.UbFragRange).HasColumnName(@"ubFragRange").IsRequired().HasColumnType("int");
            Property(x => x.UbHorizontalDegree).HasColumnName(@"ubHorizontalDegree").IsRequired().HasColumnType("int");
            Property(x => x.UbVerticalDegree).HasColumnName(@"ubVerticalDegree").IsRequired().HasColumnType("int");
            Property(x => x.BIndoorModifier).HasColumnName(@"bIndoorModifier").IsRequired().HasColumnType("decimal");
            Property(x => x.FExplodeOnImpact).HasColumnName(@"fExplodeOnImpact").IsRequired().HasColumnType("bit");
            Property(x => x.GlGrenade).HasColumnName(@"GLGrenade").IsRequired().HasColumnType("bit");
            Property(x => x.RlGrenade).HasColumnName(@"RLGrenade").IsRequired().HasColumnType("bit");
            Property(x => x.Mine).HasColumnName(@"Mine").IsRequired().HasColumnType("bit");
            Property(x => x.Flare).HasColumnName(@"Flare").IsRequired().HasColumnType("bit");
            Property(x => x.Directional).HasColumnName(@"Directional").IsRequired().HasColumnType("bit");
            Property(x => x.ShapedCharge).HasColumnName(@"ShapedCharge").IsRequired().HasColumnType("bit");

            // Foreign keys
            HasRequired(a => a.Item).WithOptional(b => b.Explosive); // FK_EXPLOSIVE_ITEM_uiIndex
        }
    }

    // FOOD
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FoodConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Food>
    {
        public FoodConfiguration()
            : this("dbo")
        {
        }

        public FoodConfiguration(string schema)
        {
            ToTable("FOOD", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // G_AttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GAttachClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GAttachClass>
    {
        public GAttachClassConfiguration()
            : this("dbo")
        {
        }

        public GAttachClassConfiguration(string schema)
        {
            ToTable("G_AttachClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameClass).HasColumnName(@"name_class").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
        }
    }

    // G_AvAttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GAvAttachClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GAvAttachClass>
    {
        public GAvAttachClassConfiguration()
            : this("dbo")
        {
        }

        public GAvAttachClassConfiguration(string schema)
        {
            ToTable("G_AvAttachClass", schema);
            HasKey(x => new { x.IdAttach, x.IdGSubClass });

            Property(x => x.IdAttach).HasColumnName(@"id_attach").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdGSubClass).HasColumnName(@"id_GSubClass").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IdAttachClass).HasColumnName(@"id_AttachClass").IsOptional().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Attachment).WithMany(b => b.GAvAttachClasses).HasForeignKey(c => c.IdAttach); // FK_G_AvAttachClass_Attachment
            HasRequired(a => a.GSubAttachClass).WithMany(b => b.GAvAttachClasses).HasForeignKey(c => c.IdGSubClass).WillCascadeOnDelete(false); // FK_G_AvAttachClass_G_SubAttachClass
        }
    }

    // G_SubAttachClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GSubAttachClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GSubAttachClass>
    {
        public GSubAttachClassConfiguration()
            : this("dbo")
        {
        }

        public GSubAttachClassConfiguration(string schema)
        {
            ToTable("G_SubAttachClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SubAttachName).HasColumnName(@"SubAttach_name").IsRequired().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.AttachClass).HasColumnName(@"AttachClass").IsRequired().HasColumnType("int");
            Property(x => x.SubAttachDescription).HasColumnName(@"SubAttachDescription").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Attachmentslot).HasColumnName(@"ATTACHMENTSLOT").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Attachmentslot_Attachmentslot).WithMany(b => b.GSubAttachClasses).HasForeignKey(c => c.Attachmentslot).WillCascadeOnDelete(false); // FK_G_SubAttachClass_ATTACHMENTSLOT1
            HasRequired(a => a.GAttachClass).WithMany(b => b.GSubAttachClasses).HasForeignKey(c => c.AttachClass).WillCascadeOnDelete(false); // FK_G_SubAttachClass_G_AttachClass
        }
    }

    // GurpsClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GurpsClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GurpsClass>
    {
        public GurpsClassConfiguration()
            : this("dbo")
        {
        }

        public GurpsClassConfiguration(string schema)
        {
            ToTable("GurpsClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(16);
        }
    }

    // ITEM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ItemConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Item>
    {
        public ItemConfiguration()
            : this("dbo")
        {
        }

        public ItemConfiguration(string schema)
        {
            ToTable("ITEM", schema);
            HasKey(x => x.UiIndex);

            Property(x => x.UiIndex).HasColumnName(@"uiIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SzItemName).HasColumnName(@"szItemName").IsRequired().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.SzLongItemName).HasColumnName(@"szLongItemName").IsOptional().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.SzItemDesc).HasColumnName(@"szItemDesc").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.UsItemClass).HasColumnName(@"usItemClass").IsRequired().HasColumnType("int");
            Property(x => x.UbClassIndex).HasColumnName(@"ubClassIndex").IsRequired().HasColumnType("int");
            Property(x => x.UbWeight).HasColumnName(@"ubWeight").IsRequired().HasColumnType("decimal").HasPrecision(7,3);
            Property(x => x.ItemSize).HasColumnName(@"ItemSize").IsRequired().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.UsPrice).HasColumnName(@"usPrice").IsRequired().HasColumnType("money").HasPrecision(19,4);
            Property(x => x.UbCalibre).HasColumnName(@"ubCalibre").IsOptional().HasColumnType("int");
            Property(x => x.Damageable).HasColumnName(@"Damageable").IsRequired().HasColumnType("bit");
            Property(x => x.Repairable).HasColumnName(@"Repairable").IsRequired().HasColumnType("bit");
            Property(x => x.WaterDamages).HasColumnName(@"WaterDamages").IsRequired().HasColumnType("bit");
            Property(x => x.Metal).HasColumnName(@"Metal").IsRequired().HasColumnType("bit");
            Property(x => x.TwoHanded).HasColumnName(@"TwoHanded").IsRequired().HasColumnType("bit");
            Property(x => x.Electronic).HasColumnName(@"Electronic").IsRequired().HasColumnType("bit");
            Property(x => x.Ht).HasColumnName(@"HT").IsRequired().HasColumnType("bit");
            Property(x => x.Ut).HasColumnName(@"UT").IsRequired().HasColumnType("bit");
            Property(x => x.RemoteTrigger).HasColumnName(@"RemoteTrigger").IsRequired().HasColumnType("bit");
            Property(x => x.GasMask).HasColumnName(@"GasMask").IsRequired().HasColumnType("bit");
            Property(x => x.Alcohol).HasColumnName(@"Alcohol").IsRequired().HasColumnType("bit");
            Property(x => x.Hardware).HasColumnName(@"Hardware").IsRequired().HasColumnType("bit");
            Property(x => x.Medical).HasColumnName(@"Medical").IsRequired().HasColumnType("bit");
            Property(x => x.CamouflageKit).HasColumnName(@"CamouflageKit").IsRequired().HasColumnType("bit");
            Property(x => x.LocksmithKit).HasColumnName(@"LocksmithKit").IsRequired().HasColumnType("bit");
            Property(x => x.Toolkit).HasColumnName(@"Toolkit").IsRequired().HasColumnType("bit");
            Property(x => x.FirstAidKit).HasColumnName(@"FirstAidKit").IsRequired().HasColumnType("bit");
            Property(x => x.MedicalKit).HasColumnName(@"MedicalKit").IsRequired().HasColumnType("bit");
            Property(x => x.WireCutters).HasColumnName(@"WireCutters").IsRequired().HasColumnType("bit");
            Property(x => x.Canteen).HasColumnName(@"Canteen").IsRequired().HasColumnType("bit");
            Property(x => x.GasCan).HasColumnName(@"GasCan").IsRequired().HasColumnType("bit");
            Property(x => x.Batteries).HasColumnName(@"Batteries").IsRequired().HasColumnType("bit");
            Property(x => x.NeedsBatteries).HasColumnName(@"NeedsBatteries").IsRequired().HasColumnType("bit");
            Property(x => x.ContainsLiquid).HasColumnName(@"ContainsLiquid").IsRequired().HasColumnType("bit");
            Property(x => x.MetalDetector).HasColumnName(@"MetalDetector").IsRequired().HasColumnType("bit");
            Property(x => x.FingerPrintId).HasColumnName(@"FingerPrintID").IsRequired().HasColumnType("bit");
            Property(x => x.TripWireActivation).HasColumnName(@"TripWireActivation").IsRequired().HasColumnType("bit");
            Property(x => x.TripWire).HasColumnName(@"TripWire").IsRequired().HasColumnType("bit");
            Property(x => x.Mount).HasColumnName(@"Mount").IsRequired().HasColumnType("bit");
            Property(x => x.Tl).HasColumnName(@"TL").IsRequired().HasColumnType("int");
            Property(x => x.Lc).HasColumnName(@"LC").IsRequired().HasColumnType("int");
            Property(x => x.SizeBatteries).HasColumnName(@"SizeBatteries").IsOptional().HasColumnType("nvarchar").HasMaxLength(4);
            Property(x => x.FoodType).HasColumnName(@"FoodType").IsRequired().HasColumnType("int");
            Property(x => x.LockPickModifier).HasColumnName(@"LockPickModifier").IsRequired().HasColumnType("int");
            Property(x => x.CrowbarModifier).HasColumnName(@"CrowbarModifier").IsRequired().HasColumnType("int");
            Property(x => x.DisarmModifier).HasColumnName(@"DisarmModifier").IsRequired().HasColumnType("int");
            Property(x => x.RepairModifier).HasColumnName(@"RepairModifier").IsRequired().HasColumnType("int");
            Property(x => x.DamageChance).HasColumnName(@"DamageChance").IsRequired().HasColumnType("int");
            Property(x => x.Clothestype).HasColumnName(@"clothestype").IsRequired().HasColumnType("int");
            Property(x => x.DrugType).HasColumnName(@"DrugType").IsRequired().HasColumnType("int");
            Property(x => x.ItemImage).HasColumnName(@"Item_Image").IsOptional().HasColumnType("varbinary");
            Property(x => x.MinSt).HasColumnName(@"minST").IsRequired().HasColumnType("int");
            Property(x => x.Link).HasColumnName(@"Link").IsOptional().HasColumnType("nvarchar(max)");
            Property(x => x.Used).HasColumnName(@"used").IsRequired().HasColumnType("bit");
            Property(x => x.Dt).HasColumnName(@"dt").IsOptional().HasColumnType("datetime");
            Property(x => x.CountOfBat).HasColumnName(@"Count_of_Bat").IsRequired().HasColumnType("int");
            Property(x => x.WorksOnBat).HasColumnName(@"Works_on_Bat").IsRequired().HasColumnType("nvarchar").HasMaxLength(15);

            // Foreign keys
            HasOptional(a => a.Caliber).WithMany(b => b.Items).HasForeignKey(c => c.UbCalibre).WillCascadeOnDelete(false); // FK_Calibre
            HasRequired(a => a.Cloth).WithMany(b => b.Items).HasForeignKey(c => c.Clothestype).WillCascadeOnDelete(false); // FK_ITEM_Clothes
            HasRequired(a => a.Food).WithMany(b => b.Items).HasForeignKey(c => c.FoodType).WillCascadeOnDelete(false); // FK_ITEM_Food
            HasRequired(a => a.ItemSubClass).WithMany(b => b.Items).HasForeignKey(c => c.UsItemClass).WillCascadeOnDelete(false); // FK_ITEM_ItemSubClass_id
            HasRequired(a => a.Lc_Lc).WithMany(b => b.Items).HasForeignKey(c => c.Lc).WillCascadeOnDelete(false); // FK_ITEM_LC
            HasRequired(a => a.Tl_Tl).WithMany(b => b.Items).HasForeignKey(c => c.Tl).WillCascadeOnDelete(false); // FK_ITEM_TL
        }
    }

    // ItemClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ItemClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ItemClass>
    {
        public ItemClassConfiguration()
            : this("dbo")
        {
        }

        public ItemClassConfiguration(string schema)
        {
            ToTable("ItemClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(70);
        }
    }

    // ItemSubClass
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ItemSubClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ItemSubClass>
    {
        public ItemSubClassConfiguration()
            : this("dbo")
        {
        }

        public ItemSubClassConfiguration(string schema)
        {
            ToTable("ItemSubClass", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameSub).HasColumnName(@"NameSub").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdItemClass).HasColumnName(@"IdItemClass").IsRequired().HasColumnType("int");
            Property(x => x.Type).HasColumnName(@"Type").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.IdGurpsSubClass).HasColumnName(@"idGurpsSubClass").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.GurpsClass).WithMany(b => b.ItemSubClasses).HasForeignKey(c => c.IdGurpsSubClass).WillCascadeOnDelete(false); // FK_ItemSubClass_WeaponClass_id
            HasRequired(a => a.ItemClass).WithMany(b => b.ItemSubClasses).HasForeignKey(c => c.IdItemClass).WillCascadeOnDelete(false); // FK_ItemSubClass_ItemClass_id
        }
    }

    // LaserColorEf
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class LaserColorEfConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<LaserColorEf>
    {
        public LaserColorEfConfiguration()
            : this("dbo")
        {
        }

        public LaserColorEfConfiguration(string schema)
        {
            ToTable("LaserColorEf", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.LaserColorDayEfect).HasColumnName(@"LaserColorDayEfect").IsOptional().HasColumnType("decimal").HasPrecision(4,2);
        }
    }

    // LC
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class LcConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Lc>
    {
        public LcConfiguration()
            : this("dbo")
        {
        }

        public LcConfiguration(string schema)
        {
            ToTable("LC", schema);
            HasKey(x => x.IdLc);

            Property(x => x.IdLc).HasColumnName(@"Id_LC").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameLc).HasColumnName(@"Name_LC").IsOptional().HasColumnType("nvarchar").HasMaxLength(10);
            Property(x => x.ShortDes).HasColumnName(@"ShortDes").IsOptional().HasColumnType("nvarchar").HasMaxLength(15);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(300);
        }
    }

    // LOADBEARINGEQUIPMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class LoadbearingequipmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Loadbearingequipment>
    {
        public LoadbearingequipmentConfiguration()
            : this("dbo")
        {
        }

        public LoadbearingequipmentConfiguration(string schema)
        {
            ToTable("LOADBEARINGEQUIPMENT", schema);
            HasKey(x => x.LbeIndex);

            Property(x => x.LbeIndex).HasColumnName(@"lbeIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.LbeClass).HasColumnName(@"LBEClass").IsRequired().HasColumnType("int");
            Property(x => x.LbeCombo).HasColumnName(@"lbeCombo").IsRequired().HasColumnType("int");
            Property(x => x.LbeFilledSize).HasColumnName(@"lbeFilledSize").IsRequired().HasColumnType("int");
            Property(x => x.LbeAvailableVolume).HasColumnName(@"lbeAvailableVolume").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketsAvailable).HasColumnName(@"lbePocketsAvailable").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex1).HasColumnName(@"lbePocketIndex1").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex2).HasColumnName(@"lbePocketIndex2").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex3).HasColumnName(@"lbePocketIndex3").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex4).HasColumnName(@"lbePocketIndex4").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex5).HasColumnName(@"lbePocketIndex5").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex6).HasColumnName(@"lbePocketIndex6").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex7).HasColumnName(@"lbePocketIndex7").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex8).HasColumnName(@"lbePocketIndex8").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex9).HasColumnName(@"lbePocketIndex9").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex10).HasColumnName(@"lbePocketIndex10").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex11).HasColumnName(@"lbePocketIndex11").IsRequired().HasColumnType("int");
            Property(x => x.LbePocketIndex12).HasColumnName(@"lbePocketIndex12").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Item).WithOptional(b => b.Loadbearingequipment); // FK_LOADBEARINGEQUIPMENT_ITEM_uiIndex
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class sys_DatabaseFirewallRuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<sys_DatabaseFirewallRule>
    {
        public sys_DatabaseFirewallRuleConfiguration()
            : this("sys")
        {
        }

        public sys_DatabaseFirewallRuleConfiguration(string schema)
        {
            ToTable("database_firewall_rules", schema);
            HasKey(x => new { x.Id, x.Name, x.StartIpAddress, x.EndIpAddress, x.CreateDate, x.ModifyDate });

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.StartIpAddress).HasColumnName(@"start_ip_address").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(45);
            Property(x => x.EndIpAddress).HasColumnName(@"end_ip_address").IsRequired().IsUnicode(false).HasColumnType("varchar").HasMaxLength(45);
            Property(x => x.CreateDate).HasColumnName(@"create_date").IsRequired().HasColumnType("datetime");
            Property(x => x.ModifyDate).HasColumnName(@"modify_date").IsRequired().HasColumnType("datetime");
        }
    }

    // TL
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TlConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Tl>
    {
        public TlConfiguration()
            : this("dbo")
        {
        }

        public TlConfiguration(string schema)
        {
            ToTable("TL", schema);
            HasKey(x => x.IdTl);

            Property(x => x.IdTl).HasColumnName(@"Id_Tl").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameTl).HasColumnName(@"name_TL").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Description).HasColumnName(@"Description").IsOptional().HasColumnType("nvarchar").HasMaxLength(60);
            Property(x => x.StartMoney).HasColumnName(@"StartMoney").IsOptional().HasColumnType("decimal").HasPrecision(19,4);
        }
    }

    // Type_of_Box
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TypeOfBoxConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeOfBox>
    {
        public TypeOfBoxConfiguration()
            : this("dbo")
        {
        }

        public TypeOfBoxConfiguration(string schema)
        {
            ToTable("Type_of_Box", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.NameOfType).HasColumnName(@"nameOfType").IsOptional().IsUnicode(false).HasColumnType("varchar").HasMaxLength(50);
        }
    }

    // TypeOfDamage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TypeOfDamageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TypeOfDamage>
    {
        public TypeOfDamageConfiguration()
            : this("dbo")
        {
        }

        public TypeOfDamageConfiguration(string schema)
        {
            ToTable("TypeOfDamage", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(5);
            Property(x => x.LongName).HasColumnName(@"LongName").IsOptional().HasColumnType("nvarchar").HasMaxLength(30);
            Property(x => x.MDamage).HasColumnName(@"mDamage").IsRequired().HasColumnType("nvarchar").HasMaxLength(5);
        }
    }

    // WEAPON
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WeaponConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Weapon>
    {
        public WeaponConfiguration()
            : this("dbo")
        {
        }

        public WeaponConfiguration(string schema)
        {
            ToTable("WEAPON", schema);
            HasKey(x => x.UiIndex);

            Property(x => x.UiIndex).HasColumnName(@"uiIndex").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SzWeaponName).HasColumnName(@"szWeaponName").IsRequired().HasColumnType("nvarchar").HasMaxLength(80);
            Property(x => x.DefAcc).HasColumnName(@"DefACC").IsRequired().HasColumnType("int");
            Property(x => x.AccAddin).HasColumnName(@"ACCAddin").IsOptional().HasColumnType("int");
            Property(x => x.HalfRange).HasColumnName(@"Half_Range").IsRequired().HasColumnType("decimal").HasPrecision(10,4);
            Property(x => x.FullRange).HasColumnName(@"FullRange").IsRequired().HasColumnType("decimal").HasPrecision(10,4);
            Property(x => x.MinRange).HasColumnName(@"MinRange").IsRequired().HasColumnType("bit");
            Property(x => x.AWeight).HasColumnName(@"AWeight").IsRequired().HasColumnType("decimal").HasPrecision(5,3);
            Property(x => x.Rof).HasColumnName(@"ROF").IsRequired().HasColumnType("int");
            Property(x => x.FullAuto).HasColumnName(@"Full_auto").IsRequired().HasColumnType("bit");
            Property(x => x.RofForSh).HasColumnName(@"ROF_for_Sh").IsOptional().HasColumnType("int");
            Property(x => x.Shots).HasColumnName(@"Shots").IsRequired().HasColumnType("int");
            Property(x => x.TimeForReload).HasColumnName(@"Time_For_reload").IsRequired().HasColumnType("int");
            Property(x => x.SingleReload).HasColumnName(@"single_reload").IsRequired().HasColumnType("bit");
            Property(x => x.Recoil).HasColumnName(@"Recoil").IsRequired().HasColumnType("int");
            Property(x => x.HeavyWeapon).HasColumnName(@"HeavyWeapon").IsRequired().HasColumnType("bit");
            Property(x => x.AddInChamber).HasColumnName(@"Add_in_Chamber").IsRequired().HasColumnType("bit");
            Property(x => x.CutOffShots).HasColumnName(@"CutOff_shots").IsRequired().HasColumnType("bit");
            Property(x => x.CutOffShotsCount).HasColumnName(@"CutOff_shotsCount").IsRequired().HasColumnType("int");
            Property(x => x.GrenadeLauncher).HasColumnName(@"GrenadeLauncher").IsRequired().HasColumnType("bit");
            Property(x => x.RocketLauncher).HasColumnName(@"RocketLauncher").IsRequired().HasColumnType("bit");
            Property(x => x.Mortar).HasColumnName(@"Mortar").IsRequired().HasColumnType("bit");
            Property(x => x.Cannon).HasColumnName(@"Cannon").IsRequired().HasColumnType("bit");
            Property(x => x.SingleShotRocketLauncher).HasColumnName(@"SingleShot_RocketLauncher").IsRequired().HasColumnType("bit");
            Property(x => x.RocketRifle).HasColumnName(@"RocketRifle").IsRequired().HasColumnType("bit");
            Property(x => x.Bulkfolded).HasColumnName(@"Bulkfolded").IsRequired().HasColumnType("bit");
            Property(x => x.Hcrof).HasColumnName(@"HCROF").IsRequired().HasColumnType("bit");
            Property(x => x.HcrofValue).HasColumnName(@"HCROFValue").IsRequired().HasColumnType("int");

            // Foreign keys
            HasRequired(a => a.Item).WithOptional(b => b.Weapon); // FK_WEAPON_ITEM_uiIndex
        }
    }

    // WeaponAttackType
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WeaponAttackTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeaponAttackType>
    {
        public WeaponAttackTypeConfiguration()
            : this("dbo")
        {
        }

        public WeaponAttackTypeConfiguration(string schema)
        {
            ToTable("WeaponAttackType", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").IsOptional().HasColumnType("nvarchar").HasMaxLength(20);
            Property(x => x.Descr).HasColumnName(@"descr").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
        }
    }

    // WeaponDamage
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class WeaponDamageConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<WeaponDamage>
    {
        public WeaponDamageConfiguration()
            : this("dbo")
        {
        }

        public WeaponDamageConfiguration(string schema)
        {
            ToTable("WeaponDamage", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IdWeapon).HasColumnName(@"idWeapon").IsRequired().HasColumnType("int");
            Property(x => x.IdWeaponAttackType).HasColumnName(@"idWeaponAttackType").IsRequired().HasColumnType("int");
            Property(x => x.Damage).HasColumnName(@"Damage").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ArmorDivision).HasColumnName(@"ArmorDivision").IsRequired().HasColumnType("decimal").HasPrecision(5,2);
            Property(x => x.IdTypeOfDamage1).HasColumnName(@"idTypeOfDamage1").IsOptional().HasColumnType("int");
            Property(x => x.IdTypeOfDamage2).HasColumnName(@"idTypeOfDamage2").IsOptional().HasColumnType("int");
            Property(x => x.TypeOfDamage1Text).HasColumnName(@"TypeOfDamage1text").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.TypeOfDamage2Text).HasColumnName(@"TypeOfDamage2text").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.Descrip).HasColumnName(@"Descrip").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.TypeOfDamage_IdTypeOfDamage1).WithMany(b => b.IdTypeOfDamage1).HasForeignKey(c => c.IdTypeOfDamage1).WillCascadeOnDelete(false); // FK_WeaponDamage_TypeOfDamage_id1
            HasOptional(a => a.TypeOfDamage_IdTypeOfDamage2).WithMany(b => b.IdTypeOfDamage2).HasForeignKey(c => c.IdTypeOfDamage2).WillCascadeOnDelete(false); // FK_WeaponDamage_TypeOfDamage_id2
            HasRequired(a => a.Weapon).WithMany(b => b.WeaponDamages).HasForeignKey(c => c.IdWeapon); // FK_WeaponDamage_WEAPON_uiIndex
            HasRequired(a => a.WeaponAttackType).WithMany(b => b.WeaponDamages).HasForeignKey(c => c.IdWeaponAttackType).WillCascadeOnDelete(false); // FK_WeaponDamage_WeaponAttackType_id
        }
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

