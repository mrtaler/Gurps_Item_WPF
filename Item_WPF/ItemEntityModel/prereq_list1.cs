//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Item_WPF.ItemEntityModel
{
    using System;
    using System.Collections.Generic;
    
    public partial class prereq_list1 : System.ComponentModel.INotifyPropertyChanged
    {
     
     #region Implement INotifyPropertyChanged
     
     public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
     
     protected virtual void OnPropertyChanged(string propertyName)
     {
      if (PropertyChanged != null)
      {
       PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
     }
     
     #endregion
     
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public prereq_list1()
        {
            this.advantage_prereq = new HashSet<advantage_prereq>();
            this.attribute_prereq = new HashSet<attribute_prereq>();
            this.prereq_list11 = new HashSet<prereq_list1>();
            this.skill_prereq = new HashSet<skill_prereq>();
            this.when_tl = new HashSet<when_tl>();
        }
    
        private string _PrimaryKey;
    	public string PrimaryKey 
    	{ 
    		get
    		{
    			return _PrimaryKey;
    		} 
    		set
    		{
    			if (_PrimaryKey != value)
    			{
    				_PrimaryKey = value;
    				OnPropertyChanged("PrimaryKey");
    			}
    		}
    	}
        private string _all;
    	public string all 
    	{ 
    		get
    		{
    			return _all;
    		} 
    		set
    		{
    			if (_all != value)
    			{
    				_all = value;
    				OnPropertyChanged("all");
    			}
    		}
    	}
        private string _FK_prereq_list;
    	public string FK_prereq_list 
    	{ 
    		get
    		{
    			return _FK_prereq_list;
    		} 
    		set
    		{
    			if (_FK_prereq_list != value)
    			{
    				_FK_prereq_list = value;
    				OnPropertyChanged("FK_prereq_list");
    			}
    		}
    	}
        private string _FK_skill;
    	public string FK_skill 
    	{ 
    		get
    		{
    			return _FK_skill;
    		} 
    		set
    		{
    			if (_FK_skill != value)
    			{
    				_FK_skill = value;
    				OnPropertyChanged("FK_skill");
    			}
    		}
    	}
        private string _FK_technique;
    	public string FK_technique 
    	{ 
    		get
    		{
    			return _FK_technique;
    		} 
    		set
    		{
    			if (_FK_technique != value)
    			{
    				_FK_technique = value;
    				OnPropertyChanged("FK_technique");
    			}
    		}
    	}
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        private ICollection<advantage_prereq> _advantage_prereq;
            public virtual ICollection<advantage_prereq> advantage_prereq
            {
                get { return _advantage_prereq; }
                set
                { if(_advantage_prereq != value)
                    {    _advantage_prereq = value;    OnPropertyChanged("advantage_prereq");   }
                }
            } 
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        private ICollection<attribute_prereq> _attribute_prereq;
            public virtual ICollection<attribute_prereq> attribute_prereq
            {
                get { return _attribute_prereq; }
                set
                { if(_attribute_prereq != value)
                    {    _attribute_prereq = value;    OnPropertyChanged("attribute_prereq");   }
                }
            } 
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        private ICollection<prereq_list1> _prereq_list11;
            public virtual ICollection<prereq_list1> prereq_list11
            {
                get { return _prereq_list11; }
                set
                { if(_prereq_list11 != value)
                    {    _prereq_list11 = value;    OnPropertyChanged("prereq_list11");   }
                }
            } 
        private prereq_list1 _prereq_list12;
            public virtual prereq_list1 prereq_list12
            {
                get { return _prereq_list12; }
                set
                { if(_prereq_list12 != value)
                    {    _prereq_list12 = value;    OnPropertyChanged("prereq_list12");   }
                }
            } 
        private skill1 _skill1;
            public virtual skill1 skill1
            {
                get { return _skill1; }
                set
                { if(_skill1 != value)
                    {    _skill1 = value;    OnPropertyChanged("skill1");   }
                }
            } 
        private technique _technique;
            public virtual technique technique
            {
                get { return _technique; }
                set
                { if(_technique != value)
                    {    _technique = value;    OnPropertyChanged("technique");   }
                }
            } 
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        private ICollection<skill_prereq> _skill_prereq;
            public virtual ICollection<skill_prereq> skill_prereq
            {
                get { return _skill_prereq; }
                set
                { if(_skill_prereq != value)
                    {    _skill_prereq = value;    OnPropertyChanged("skill_prereq");   }
                }
            } 
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        private ICollection<when_tl> _when_tl;
            public virtual ICollection<when_tl> when_tl
            {
                get { return _when_tl; }
                set
                { if(_when_tl != value)
                    {    _when_tl = value;    OnPropertyChanged("when_tl");   }
                }
            } 
    }
}
