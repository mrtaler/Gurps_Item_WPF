//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Item_WPF.ItemEntityModel
{
    using System;
    using System.Collections.Generic;
    
    public partial class CombineWeap : System.ComponentModel.INotifyPropertyChanged
    {
     
     #region Implement INotifyPropertyChanged
     
     public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
     
     protected virtual void OnPropertyChanged(string propertyName)
     {
      if (PropertyChanged != null)
      {
       PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
      }
     }
     
     #endregion
     
        private int _id;
    	public int id 
    	{ 
    		get
    		{
    			return _id;
    		} 
    		set
    		{
    			if (_id != value)
    			{
    				_id = value;
    				OnPropertyChanged("id");
    			}
    		}
    	}
        private int _idWeapon;
    	public int idWeapon 
    	{ 
    		get
    		{
    			return _idWeapon;
    		} 
    		set
    		{
    			if (_idWeapon != value)
    			{
    				_idWeapon = value;
    				OnPropertyChanged("idWeapon");
    			}
    		}
    	}
        private Nullable<int> _ScopeSelect;
    	public Nullable<int> ScopeSelect 
    	{ 
    		get
    		{
    			return _ScopeSelect;
    		} 
    		set
    		{
    			if (_ScopeSelect != value)
    			{
    				_ScopeSelect = value;
    				OnPropertyChanged("ScopeSelect");
    			}
    		}
    	}
        private Nullable<int> _LaserSelect;
    	public Nullable<int> LaserSelect 
    	{ 
    		get
    		{
    			return _LaserSelect;
    		} 
    		set
    		{
    			if (_LaserSelect != value)
    			{
    				_LaserSelect = value;
    				OnPropertyChanged("LaserSelect");
    			}
    		}
    	}
        private Nullable<int> _LightSelect;
    	public Nullable<int> LightSelect 
    	{ 
    		get
    		{
    			return _LightSelect;
    		} 
    		set
    		{
    			if (_LightSelect != value)
    			{
    				_LightSelect = value;
    				OnPropertyChanged("LightSelect");
    			}
    		}
    	}
        private Nullable<int> _BipodSelect;
    	public Nullable<int> BipodSelect 
    	{ 
    		get
    		{
    			return _BipodSelect;
    		} 
    		set
    		{
    			if (_BipodSelect != value)
    			{
    				_BipodSelect = value;
    				OnPropertyChanged("BipodSelect");
    			}
    		}
    	}
        private Nullable<int> _SilenserSelect;
    	public Nullable<int> SilenserSelect 
    	{ 
    		get
    		{
    			return _SilenserSelect;
    		} 
    		set
    		{
    			if (_SilenserSelect != value)
    			{
    				_SilenserSelect = value;
    				OnPropertyChanged("SilenserSelect");
    			}
    		}
    	}
        private Nullable<int> _LauncherSelect;
    	public Nullable<int> LauncherSelect 
    	{ 
    		get
    		{
    			return _LauncherSelect;
    		} 
    		set
    		{
    			if (_LauncherSelect != value)
    			{
    				_LauncherSelect = value;
    				OnPropertyChanged("LauncherSelect");
    			}
    		}
    	}
        private Nullable<int> _BayonetSelect;
    	public Nullable<int> BayonetSelect 
    	{ 
    		get
    		{
    			return _BayonetSelect;
    		} 
    		set
    		{
    			if (_BayonetSelect != value)
    			{
    				_BayonetSelect = value;
    				OnPropertyChanged("BayonetSelect");
    			}
    		}
    	}
        private Nullable<int> _MagazineSelect;
    	public Nullable<int> MagazineSelect 
    	{ 
    		get
    		{
    			return _MagazineSelect;
    		} 
    		set
    		{
    			if (_MagazineSelect != value)
    			{
    				_MagazineSelect = value;
    				OnPropertyChanged("MagazineSelect");
    			}
    		}
    	}
        private Nullable<int> _InternalSelect;
    	public Nullable<int> InternalSelect 
    	{ 
    		get
    		{
    			return _InternalSelect;
    		} 
    		set
    		{
    			if (_InternalSelect != value)
    			{
    				_InternalSelect = value;
    				OnPropertyChanged("InternalSelect");
    			}
    		}
    	}
        private Nullable<int> _ExternalSelect;
    	public Nullable<int> ExternalSelect 
    	{ 
    		get
    		{
    			return _ExternalSelect;
    		} 
    		set
    		{
    			if (_ExternalSelect != value)
    			{
    				_ExternalSelect = value;
    				OnPropertyChanged("ExternalSelect");
    			}
    		}
    	}
        private Nullable<int> _StockSelect;
    	public Nullable<int> StockSelect 
    	{ 
    		get
    		{
    			return _StockSelect;
    		} 
    		set
    		{
    			if (_StockSelect != value)
    			{
    				_StockSelect = value;
    				OnPropertyChanged("StockSelect");
    			}
    		}
    	}
    }
}
