
public class DelegateCommand : ICommand
    {
        private readonly Predicate<object> _canExecute;
        private readonly Action<object> _execute;

        public event EventHandler CanExecuteChanged;

        public DelegateCommand(Action<object> execute)
            : this(execute, null)
        {
        }

        public DelegateCommand(Action<object> execute,
                       Predicate<object> canExecute)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            if (_canExecute == null)
            {
                return true;
            }

            return _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public void RaiseCanExecuteChanged()
        {
            if (CanExecuteChanged != null)
            {
                CanExecuteChanged(this, EventArgs.Empty);
            }
        }
    }



	//////////////
	Код:

private void createTree_Click(object sender, EventArgs e)
        {
            TraverseSOM(xsdPath.Text);
        }
        private static XmlSchema ReadAndCompileSchema(string fileName)
        {
            XmlTextReader tr = new XmlTextReader(fileName, new NameTable());
            XmlSchema schema = XmlSchema.Read(tr,
                   new ValidationEventHandler(ValidationCallbackOne));
            tr.Close();
            XmlSchemaSet xset = new XmlSchemaSet();
            xset.Add(schema);
            xset.Compile();
            return schema;
        }
        private static void ValidationCallbackOne(object sender, ValidationEventArgs args)
        {
            Console.WriteLine("Exception Severity: " + args.Severity);
            Console.WriteLine(args.Message);
        }
        private void TraverseSOM(string xsfFilename)
        {
            XmlSchema custSchema = ReadAndCompileSchema(xsfFilename);
            foreach (XmlSchemaElement elem in custSchema.Elements.Values)
            {
                TreeNode rootNode = ProcessElement(elem);
                treeView.Nodes.Add(rootNode);
            }
        }
        private TreeNode ProcessElement(XmlSchemaElement element)
        {
            TreeNode node = new TreeNode(element.Name);
            XmlSchemaComplexType ct = element.ElementSchemaType as XmlSchemaComplexType;
            if (ct != null)
            {
                // Обработка вложенных элементов
                XmlSchemaSequence sequence =
                    ct.ContentTypeParticle as XmlSchemaSequence;
                if (sequence != null)
                {
                    for (int i = 0; i < sequence.Items.Count; ++i)
                    {
                        XmlSchemaElement child =
                            sequence.Items[i] as XmlSchemaElement;
                        if (child != null)
                        {
                            TreeNode childNode = ProcessElement(child);
                            node.Nodes.Add(childNode);
                        }
                    }
                }
                // Обработка атрибутов
                foreach (DictionaryEntry obj in ct.AttributeUses)
                {
                    node.Nodes.Add((obj.Value as XmlSchemaAttribute).Name);
                }
            }
            return node;
        }